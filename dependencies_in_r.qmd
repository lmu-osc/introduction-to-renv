---
title: "Dependencies in R"
bibliography: references.bib
---

```{r, echo=FALSE, message=FALSE}
knitr::opts_chunk$set()
library(dplyr)
library(magrittr)
```

This page will talk about specifics of dependency management in R including legacy projects like {packrat}, alternative community-driven projects like {groundhogr}, and introduce the {renv} package.

# Some Technical Definitions

Prior to discussing the various package managers in R, it is important to understand some basic concepts in R that are relevant to dependency management, namely the **concepts of and differences between packages, libraries, and repositories**.

## Packages

Packages can be thought of as the the bundles of software you use for data cleaning, analysis, scripting/programming, and various other activities. What these all have in common is that they build upon the core, basic functionalities of the R language itself. For example, the code below demonstrates how one can filter a data set using *only* R's built-in capabilities and by using {dplyr}.

``` r
iris[iris$Species == "setosa" & iris$Sepal.Length > 4.5, ]
dplyr::filter(iris, Species == "setosa", Sepal.Length > 4.5)
```

The basic R approach is relatively verbose in requiring users to write "iris" twice, requires understanding of `[` as an operator, and requires one to remember that indexing in R works `[row, column]`. Someone programming with R **should** still know these things, but, in my opinion, the code from {dplyr} is simply easier to write and is more readable to other users. This trivial example is simply meant to highlight some of the main reasons for packages: convenience, and building better tools on top of the language.

### Pre-Installed Packages

Upon installing R, the "base" packages are automatically included and you will likely recognize some of the "recommended" packages such as Matrix or survival because they are so ubiquitous in the R ecosystem. That is, either you yourself use some of these packages or packages you use have dependencies on these.

```{r}
installed.packages(priority = c("base", "recommended")) %>%
  as_tibble() %>%
  select(Package, Version, Priority, Depends, Imports) %>%
  DT::datatable(options = list(paging=TRUE, scrollY = '300px'))
```

-   in general, packages can live in one of two places: in a [Library](#libraries) or in a [Repository](#repositories)
-   of course, you can also download additional packages from various online sources and you can even create your own packages. However, where are all of these downloaded packages stored? In

## Libraries {#libraries}

-   Simply put, these are the locations where R packages are stored. The use of the `library()` function to attach a package to your session, e.g. `library("dplyr")`, can thus be a bit confusing. In everyday situations, making this distinction is not so important, but for the purposes of this tutorial it is essential to have a more precise definition of a library.

[@xieyihui2014]

## Repositories {#repositories}

[See also the Posit article on packages, libraries, and repositories.](https://solutions.posit.co/envs-pkgs/repos_and_libs/)

# Package Managers in R

## {packrat}

-   {packrat} was for many years the most popular environment/dependency manager package for R. It is maintained by RStudio/Posit, and still receives bug updates. However, it has been soft-deprecated by Posit in favor of the {renv} package since at least [April 2020](https://github.com/rstudio/packrat/commit/90520e2247f65b2b9fb21bfa804444bd5ab2b78c). You should not start new projects with {packrat}, and, if possible, migrate existing projects using {packrat} over to {renv}. That said, it is worth knowing about the existence of this package because old tutorials, projects, and repos may still be using it.

## {groundhogr}

-   [{groundhogr}](https://groundhogr.com/): this is an open-source project to enable dependency management, and appears to have some popularity within psychological research and possibly other fields. It claims to address [some shortcomings](https://groundhogr.com/p3m/) of Posit Package Manager (discussed later), but my opinion is that the comparisons are misleading; {groundhogr} must be compared against {renv} combined with PPM, not just against PPM. That said, if your collaborators are using {groundhogr}, then I would recommend learning it to use it for those projects, but the benefits of {renv} make it the overwhelming favorable option.

## {renv}

-   {renv}: this is another one of Posit's inventions, and is now in its 1.X.X version iterations meaning it can be considered stable without any breaking changes likely to occur at least for many years. (This would generally be indicated with a minor release to e.g. 1.X+1.X or a major release to e.g. 2.X.X)
    -   pros:
        -   developed by professional software engineers at Posit so there is paid support. development, however, is also done open-source so people can independently propose bug fixes or raise issues
        -   likely the most popular option already. learning this is a transferable skill between academia and industry.
        -   integration with other Posit packages and development pipelines, in particular with CI/CD pipelines on GitHub repos. Another tutorial will discuss CI/CD pipelines, but, in short, using {renv} means you can more easily automate deploying websites through GitHub Pages, checking the development status of R packages you work on, deploy Shiny apps to servers, and run other automated process that require specific package versions *because* Posit has developed extensions that make this easier.
        -   it works at a project level (i.e. it should be paired with the use of an R Project/`.RProj` file). {groundhogr} notes this as a disadvantage so I suppose this requirement is subjective. However, I argue this is a pro because using an R Project structure helps manage your working environment
        -   Niche: {renv} also has integrations allowing it to be used with Python which can be useful in instances where you have a multi-language project. This would likely only be encountered in complex, multi-team analysis projects or possibly in industry settings.
