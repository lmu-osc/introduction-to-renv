---
title: "{renv}: Getting Started"
engine: knitr
---

This page will talk about installation of the renv package, and how to snapshot so the lockfile updates. Will then talk about how the underlying `dependencies()` function works to identify the packages in use in the project.

Talk about how/when to update the library

Troubleshooting?

Talk about the package cache at the end of this chapter - a cache is built per the minor version of R you use. e.g. if you upgrade from R 4.3 to 4.4, then you will need to build a new cache. this can be unexpected if the caching behavior is not known to you. upgrading from e.g. R4.3.2 to R4.3.3 will not cause this, however. - the cache will, when needed, contain multiple different versions of same package and your project will link to the correct version, only downloading the version specified in the `renv.lock` if you don't already have it somewhere in the renv cache - can access path with `renv::paths$cache()` which I think helps make everything a bit more tangible

::: callout-note
It is recommended to install the latest version of {renv}. A default installation from CRAN will be the latest version of {renv}. At minimum, v1.0.0 or above should be installed.

The repository for this Quarto site was built using {renv} version `r renv::lockfile_read()$Packages$renv$Version`.
:::

# Easy Start

This "Easy Start" section provides the bare-minimum steps needed to set-up {renv} with one of your projects, and should take less than 15 minutes to complete. However, we recommended reading through reading this section **and** reading the [detailed explanation](#details) in order to understand what is happening in the background.


## Initiating {renv}

When using or adding {renv} to one of your projects, you will likely enter from one of two approaches: either from a new project with RStudio, or by adding {renv} to an already existing (or non-RStudio) project.

Either approach should yield the following results in the directory you're working within:

-   Creation of a `renv.lock` file and a `renv` folder
-   Creation of or additions to the `.Rbuildignore` and `.Rprofile` files
-   A `renv` folder will be created in the project directory (for {renv} version 1.0.0 and above)

For most purposes, one will only need to have a passing understanding of the `renv.lock` file which records the packages used in the project and their versions. The `renv` folder is where the packages are stored, and the `.Rbuildignore` and `.Rprofile` files are used to ensure that the project is reproducible and that the correct packages are loaded when the project is opened.

** Note that if you are using version control, you should not add the `renv` folder to tracking. A more detailed explanation is available in the Advanced Topics section, but the TL;DR is: the `renv` folder is not necessary for the project to be reproducible, and the project should be rebuilt from the `renv.lock` file. **

### With a New RStudio Project

When initiating a new project from within RStudio such as a typical .Rproj, a Quarto website, a new R package or similar, you can follow the approximate directions below to check the box that you would like to "Use renv with \[your\] project."

```         
File -> New Project -> New Directory -> New Project -> [x] Use renv with this project
```

### From an Existing Project or Folder

In essentially all other scenarios, one can initiate {renv} for a project by navigating to your project/folder and running the two commands below.

``` r
install.packages("renv")

library(renv)
init()
```

## Check Status of Project

The project should be in a consistent state after initiating {renv}, and this can be checked by running the `renv::status()` function.

``` r
status()
```

In short, this function checks that your project is in a "consistent state" by checking for the following:

-   That all packages detected in the project are listed in the `renv.lock` file
-   That all packages in the `renv.lock` file are actually installed
-   That all installed packages are the correct version

## Updating `renv.lock`

As you write additional `.R`, `.Rmd`, and/or `.qmd` files for your project, you will presumably employ more and more functions from foreign packages, and these new packages should be captured in the `renv.lock` file. This can be done by "snapshotting" the project which will initiate a search for calls to `library()`, `require()` and namespaced calls to functions e.g. `package::function()`.

``` r
snapshot()
```

Running the `snapshot()` function will capture new packages used in your project, *and* it will update the package versions in the `renv.lock` file if you have installed new versions to the project you are working in.

This is essentially 80% of the work you will ever need to put into creating a project that also uses {renv}. The other major component of using this package will be restoring libraries for either your own projects or for projects shared by others using `renv::restore()`. This is discussed next in [2. Restoring Another Project](restoring_a_project.html), but **we strongly recommend reading the details below before proceeding.**
