---
title: "Getting Started Details"
---

```{css, echo = FALSE}
.output {
max-height: 400px;
overflow-y: scroll;
}
```


# Details {#details}

## Initiation

When initiating a project with {renv}, the following steps are taken automatically:

1. Creation of a lockfile, `renv.lock` which records the version of R in use, the default download repository, and the packages used in the project.
1. Creation of a `renv` folder which contains the project `library`[^library_symlinks], a settings file, and a staging area for package installation
1.  Addition of the line `source("renv/activate.R")` to your .Rprofile. This file is automatically run anytime a project session is started by e.g. opening the `*.Rproj` file. This line ensures that the project library is used in the session, not the global library
1. Updates the `.Rbuildignore` to include the `renv` folder and the `renv.lock` file. This is only relevant if you're building an R package.


[^library_symlinks]: Strictly speaking, the directory `renv/library` contains [symlinks or symbolic links](https://www.google.com/search?q=symlink) to packages in the renv library, which is a cache of the packages used in the project. This "cached" library is a shared library, meaning that if you have multiple projects using the same version of the package, the package is only stored once on your computer. This is a huge space saver, especially if you have many projects using the same package. More on this in the Advanced Topics section.


### Initiation Example

Initiating {renv} in a project should print the following to the console:

``` r
renv::init()
#> The following package(s) will be updated in the lockfile:
#> 
#> # CRAN -----------------------------------------------------------------------
#> - renv          [* -> 1.0.7]
#> 
#> The version of R recorded in the lockfile will be updated:
#> - R             [* -> 4.4.0]
#> 
#> - Lockfile written to "~/Desktop/temporary".
```

And the directory structure in a new project called `temp` would look like this:

``` r
fs::dir_tree(recurse = 2)
#> .
#> â”œâ”€â”€ renv
#> â”‚   â”œâ”€â”€ activate.R
#> â”‚   â”œâ”€â”€ library
#> â”‚   â”‚   â””â”€â”€ macos
#> â”‚   â”œâ”€â”€ settings.json
#> â”‚   â””â”€â”€ staging
#> â”œâ”€â”€ renv.lock
#> â””â”€â”€ temp.Rproj
```


## Package Detection

{renv} is designed to detect the packages you are using in your project. Before discussing the details of how {renv} detects packages, it is important to understand dependencies in some detail.

<!-- It does this by searching for calls to `library()`, `require()`, or namespace calls to functions e.g. `package::function()`. Warning: packages that you have only used interactively (i.e. you never wrote a `library(<package>)` call in a .R/.Rmd script) **will not** be detected as a dependency. -->

### Dependencies

At the first degree, *you* depend on packages to perform your analysis or for your project, and you likely have included these packages in your project via calls to `library()`, `require()`, or namespaced calls e.g. `package::function()`. It is quite obvious that these packages are dependencies of your project, and should be included in the `renv.lock` file. 

However, how does {renv} detect what packages are being used in the project? The `renv:dependencies()` function! This function works by searching all R-related files (e.g. `.R`, `.Rmd`, `.qmd`) for calls to packages. It is important to note that this function only detects packages that are actually **used** and properly **declared** in the project. Packages that are not used and packages that you use interactively (i.e. you never wrote a `library(<package>)` call in a .R/.Rmd script) **will not** be detected as a dependency.

You will likely never need to use `renv::dependencies()` directly, but being aware of what it does can be massively beneficial in troubleshooting issues in the future. More importantly, this function also underlies the `renv:status()` and  `renv::snapshot()` functions which **are** essential for using {renv}.



### Dependencies of Dependencies

-   the packages you use in your project also require packages. for example, you might have noticed that when installing 1 new package, R asks you if you want to install 1, 5, 20, etc. additional packages. Simply put, this is because the package you want to install has a tree of dependencies. The dependency tree below demonstrates all of the packages that {dplyr} imports, and the packages that those imports need to import, etc.

:::{.output-overflow}

``` r
pak::pkg_deps_tree("dplyr", dependencies = NA)
#> â„¹ Loading metadata database
#> âœ” Loading metadata database ... done
#> 
#> dplyr 1.1.4 âœ¨ðŸ”§ â¬‡ (1.60 MB)
#> â”œâ”€cli 3.6.3 âœ¨ðŸ”§ â¬‡ (1.39 MB)
#> â”œâ”€generics 0.1.3 âœ¨ â¬‡ (81.91 kB)
#> â”œâ”€glue 1.7.0 âœ¨ðŸ”§ â¬‡ (159.50 kB)
#> â”œâ”€lifecycle 1.0.4 âœ¨ â¬‡ (124.78 kB)
#> â”‚ â”œâ”€cli
#> â”‚ â”œâ”€glue
#> â”‚ â””â”€rlang 1.1.4 âœ¨ðŸ”§ â¬‡ (1.89 MB)
#> â”œâ”€magrittr 2.0.3 âœ¨ðŸ”§ â¬‡ (233.52 kB)
#> â”œâ”€pillar 1.9.0 âœ¨ â¬‡ (652.06 kB)
#> â”‚ â”œâ”€cli
#> â”‚ â”œâ”€fansi 1.0.6 âœ¨ðŸ”§ â¬‡ (383.06 kB)
#> â”‚ â”œâ”€glue
#> â”‚ â”œâ”€lifecycle
#> â”‚ â”œâ”€rlang
#> â”‚ â”œâ”€utf8 1.2.4 âœ¨ðŸ”§ â¬‡ (206.91 kB)
#> â”‚ â””â”€vctrs 0.6.5 âœ¨ðŸ”§ â¬‡ (1.89 MB)
#> â”‚   â”œâ”€cli
#> â”‚   â”œâ”€glue
#> â”‚   â”œâ”€lifecycle
#> â”‚   â””â”€rlang
#> â”œâ”€R6 2.5.1 âœ¨ â¬‡ (83.20 kB)
#> â”œâ”€rlang
#> â”œâ”€tibble 3.2.1 âœ¨ðŸ”§ â¬‡ (688.89 kB)
#> â”‚ â”œâ”€fansi
#> â”‚ â”œâ”€lifecycle
#> â”‚ â”œâ”€magrittr
#> â”‚ â”œâ”€pillar
#> â”‚ â”œâ”€pkgconfig 2.0.3 âœ¨ â¬‡ (18.45 kB)
#> â”‚ â”œâ”€rlang
#> â”‚ â””â”€vctrs
#> â”œâ”€tidyselect 1.2.1 âœ¨ðŸ”§ â¬‡ (224.68 kB)
#> â”‚ â”œâ”€cli
#> â”‚ â”œâ”€glue
#> â”‚ â”œâ”€lifecycle
#> â”‚ â”œâ”€rlang
#> â”‚ â”œâ”€vctrs
#> â”‚ â””â”€withr 3.0.0 âœ¨ â¬‡ (242.00 kB)
#> â””â”€vctrs
#> 
#> Key:  âœ¨ new |  â¬‡ download | ðŸ”§ compile
```

:::

-   Dependencies
    -   hard: "Depends", "Imports", and "LinkingTo"
    -   soft: "Suggests" and "Enhances
-   With that overview of `dependencies()` and `status()`, we come to the last major player, `snapshot()` which will check your project again for new calls to packages, for updated dependencies, and for changes in the **installed** package versions (but it will not check to see if there are recent packages available on e.g. CRAN)



## Status, Snapshot, Status


-   Can check the status of your project

``` r
renv::status()
#> No issues found -- the project is in a consistent state.
```

-   what does this mean? essentially, it means that renv has not detected any discrepancies between either A) the packages declared in the lockfile and the packages actually used in the project or B) there are no discrepancies in the versions of packages declared in the lockfile and discovered installed + used from the project library.

-   {renv} can easily read information from the `renv.lock` (it's in a JSON format) so it readily knows what *should* be in the project


``` r
renv::snapshot()
#> - The lockfile is already up to date.
```




### A Simple Example

-   As expected, there are no changes; we have not changed anything with the repository. As a simple example, create a new file called `my_analysis.R`, call `library(lme4)`, and create a simple mixed model.

```{r, results='hold', message=FALSE, results='hide', eval=FALSE}
# install.packages("lme4")
library(lme4)
lmer(Sepal.Length ~ Sepal.Width + Petal.Width + (1 | Species), data = datasets::iris) 
```

-   Make sure to save the file, and then run `renv::snapshot()` again from the Console

:::{.output-overflow}


``` r
> renv::snapshot()
The following package(s) will be updated in the lockfile:
  
  # CRAN -----------------------------------------------------------------------
- boot        [* -> 1.3-30]
- brio        [* -> 1.1.5]
- callr       [* -> 3.7.6]
- cli         [* -> 3.6.2]
- crayon      [* -> 1.5.2]
- desc        [* -> 1.4.3]
- digest      [* -> 0.6.35]
- evaluate    [* -> 0.23]
- fansi       [* -> 1.0.6]
- fs          [* -> 1.6.4]
- glue        [* -> 1.7.0]
- jsonlite    [* -> 1.8.8]
- lattice     [* -> 0.22-6]
- lifecycle   [* -> 1.0.4]
- lme4        [* -> 1.1-35.3]
- magrittr    [* -> 2.0.3]
- MASS        [* -> 7.3-60.2]
- Matrix      [* -> 1.7-0]
- minqa       [* -> 1.2.6]
- nlme        [* -> 3.1-164]
- nloptr      [* -> 2.0.3]
- pillar      [* -> 1.9.0]
- pkgconfig   [* -> 2.0.3]
- processx    [* -> 3.8.4]
- ps          [* -> 1.7.6]
- R6          [* -> 2.5.1]
- RcppEigen   [* -> 0.3.4.0.0]
- rematch2    [* -> 2.1.2]
- rlang       [* -> 1.1.3]
- rprojroot   [* -> 2.0.4]
- tibble      [* -> 3.2.1]
- utf8        [* -> 1.2.4]
- vctrs       [* -> 0.6.5]
- withr       [* -> 3.0.0]

# RSPM -----------------------------------------------------------------------
- diffobj     [* -> 0.3.5]
- pkgbuild    [* -> 1.4.4]
- pkgload     [* -> 1.3.4]
- praise      [* -> 1.0.0]
- Rcpp        [* -> 1.0.12]
- testthat    [* -> 3.2.1.1]
- waldo       [* -> 0.5.2]

Do you want to proceed? [Y/n]: Y

- Lockfile written to "~/Desktop/temporary/renv.lock".
```

:::

## A Note on Caching

-   briefly describe caching and the fact that there are shared libraries
-   link out to the advanced topic on caching
