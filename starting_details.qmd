---
title: "Getting Started Details"
---


# Details {#details}

## Initiation

-   initiate project with `renv::init()`
    -   creates a lockfile
    -   creates a renv folder
    -   adds the line `source("renv/activate.R")` to your .Rprofile which is automatically run anytime a session with this project is started, i.e. you should aim to open projects that use {renv} with the associated `*.Rproj` file if it exists
    -   updates the .Rbuildignore (only relevant if you're building an R package, but good to understand this because renv files cannot be included in an R package. There are other mechanisms for managing package dependencies, namely the `DESCRIPTION` file.)
-   lockfile details
    -   if you init from a new, empty project then generally the `renv.lock` will only populate with the version of R you're currently using and your default repository

``` r
renv::init()
#> The following package(s) will be updated in the lockfile:
#> 
#> # CRAN -----------------------------------------------------------------------
#> - renv          [* -> 1.0.7]
#> 
#> The version of R recorded in the lockfile will be updated:
#> - R             [* -> 4.4.0]
#> 
#> - Lockfile written to "~/Desktop/temporary".
```

## Package Detection

### Dependencies

-   Can check the status of your project

``` r
renv::status()
#> No issues found -- the project is in a consistent state.
```

-   what does this mean? essentially, it means that renv has not detected any discrepancies between either A) the packages declared in the lockfile and the packages actually used in the project or B) there are no discrepancies in the versions of packages declared in the lockfile and discovered installed + used from the project library.

-   {renv} can easily read information from the `renv.lock` (it's in a JSON format) so it readily knows what *should* be in the project

-   however, how does {renv} know what is being used in the project? for that, the `renv:dependencies()` function was developed.

    -   you will likely never need to use this function directly, but being aware of it can be massively beneficial in troubleshooting issues in the future. This function also underlies the `renv:status()` and to-be-discussed `renv::snapshot()` functions which **are** essential.
    -   as the name suggests, `renv::dependencies()` detects the packages you are using in your project. it does this by searching for calls to `library()`, `require()`, or namespace calls to functions e.g. `package::function()`. Warning: packages that you have only used interactively (i.e. you never wrote a `library(<package>)` call in a .R/.Rmd script) **will not** be detected as a dependency

### Dependencies of Dependencies

-   the packages you use in your project also require packages. for example, you might have noticed that when installing 1 new package, R asks you if you want to install 1, 5, 20, etc. additional packages. Simply put, this is because the package you want to install has a tree of dependencies. The dependency tree below demonstrates all of the packages that {dplyr} imports, and the packages that those imports need to import, etc.

```{r, results='hold', message=FALSE, collapse=TRUE}
#| cache: true
pak::pkg_deps_tree("dplyr", dependencies = NA)
# Note: the dependencies = NA argument is equivalent 
# to dependencies = c("Depends", "Imports", "LinkingTo")
# See below for explanation
```

-   Dependencies
    -   hard: "Depends", "Imports", and "LinkingTo"
    -   soft: "Suggests" and "Enhances
-   With that overview of `dependencies()` and `status()`, we come to the last major player, `snapshot()` which will check your project again for new calls to packages, for updated dependencies, and for changes in the **installed** package versions (but it will not check to see if there are recent packages available on e.g. CRAN)

``` r
renv::snapshot()
#> - The lockfile is already up to date.
```

### A Simple Example

-   As expected, there are no changes; we have not changed anything with the repository. As a simple example, create a new file called `my_analysis.R`, call `library(lme4)`, and create a simple mixed model.

```{r, results='hold', message=FALSE, results='hide'}
# install.packages("lme4")
library(lme4)
lmer(Sepal.Length ~ Sepal.Width + Petal.Width + (1 | Species), data = iris) 
```

-   Make sure to save the file, and then run `renv::snapshot()` again from the Console

``` r
> renv::snapshot()
The following package(s) will be updated in the lockfile:
  
  # CRAN -----------------------------------------------------------------------
- boot        [* -> 1.3-30]
- brio        [* -> 1.1.5]
- callr       [* -> 3.7.6]
- cli         [* -> 3.6.2]
- crayon      [* -> 1.5.2]
- desc        [* -> 1.4.3]
- digest      [* -> 0.6.35]
- evaluate    [* -> 0.23]
- fansi       [* -> 1.0.6]
- fs          [* -> 1.6.4]
- glue        [* -> 1.7.0]
- jsonlite    [* -> 1.8.8]
- lattice     [* -> 0.22-6]
- lifecycle   [* -> 1.0.4]
- lme4        [* -> 1.1-35.3]
- magrittr    [* -> 2.0.3]
- MASS        [* -> 7.3-60.2]
- Matrix      [* -> 1.7-0]
- minqa       [* -> 1.2.6]
- nlme        [* -> 3.1-164]
- nloptr      [* -> 2.0.3]
- pillar      [* -> 1.9.0]
- pkgconfig   [* -> 2.0.3]
- processx    [* -> 3.8.4]
- ps          [* -> 1.7.6]
- R6          [* -> 2.5.1]
- RcppEigen   [* -> 0.3.4.0.0]
- rematch2    [* -> 2.1.2]
- rlang       [* -> 1.1.3]
- rprojroot   [* -> 2.0.4]
- tibble      [* -> 3.2.1]
- utf8        [* -> 1.2.4]
- vctrs       [* -> 0.6.5]
- withr       [* -> 3.0.0]

# RSPM -----------------------------------------------------------------------
- diffobj     [* -> 0.3.5]
- pkgbuild    [* -> 1.4.4]
- pkgload     [* -> 1.3.4]
- praise      [* -> 1.0.0]
- Rcpp        [* -> 1.0.12]
- testthat    [* -> 3.2.1.1]
- waldo       [* -> 0.5.2]

Do you want to proceed? [Y/n]: Y

- Lockfile written to "~/Desktop/temporary/renv.lock".
```

## A Note on Caching

-   briefly describe caching and the fact that there are shared libraries
-   link out to the advanced topic on caching
