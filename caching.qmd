---
title: "Caching"
bibliography: references.bib
---

This page will discuss the concept of caching and how it is used in {renv}.

<!-- -   briefly describe caching and the fact that there are shared libraries -->
<!-- -   discuss how {renv} uses caching -->
<!--     -   shared {renv} library for packages on local system -->
<!--     -   installation of packages, and checks for packages first in the shared library -->
<!--     -   "symlinks" to the shared library in `renv/library` -->


# What is Caching?

In the context of software development, caching is used to store data that is frequently accessed, such as packages, to speed up the execution of a program. When a program needs to access a package, it first checks the cache to see if the package is already stored there. If the package is found in the cache, the program can retrieve it quickly without having to download it again. This can significantly reduce the time it takes to run a program, especially if the package is large or if the program is run frequently.

# Caching in {renv}

In the context of {renv}, the package cache is a shared library that contains the packages used in your projects. The cache will, when needed, contain multiple different versions of the same package and your project will link to the correct version, only downloading the version specified in the `renv.lock` if you don't already have it somewhere in the renv cache. This shared library is a huge space saver, especially if you have many projects using the same packages. 

A cache is built per each minor version of R you use. For example, if have used {renv} with R versions 4.3 and 4.4 on your computer, then you will end up with a cache matching each of these R versions. This can be unexpected if the caching behavior is not known to you. Upgrading from e.g. R 4.3.2 to R 4.3.3 will not cause this, however. 

## Cache Locations

The {renv} caches for R packages will be in one of the following locations, based on your operating system:

> -   Linux: `~/.cache/R/renv/cache`
>
> -   macOS: `~/Library/Caches/org.R-project.R/R/renv/cache`
>
> -   Windows: `%LOCALAPPDATA%/renv/cache`

[@posit2024]

Within each of these cache folders, you should see subfolders for each version of R that you have used with {renv}. For example, on a macOS system, you might see the following folders:

``` r
list.files("~/Library/Caches/org.R-project.R/R/renv/cache/v5", full.names = T)

#> [1] "~/Library/Caches/org.R-project.R/R/renv/cache/v5/macos"
#> [2] "~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.2"
#> [3] "~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.3"
#> [4] "~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.4"
```

You should not need to interact with the cache directly, but it can be useful to know where it is located and particularly that there can me *multiple caches* in case you need to troubleshoot any issues with {renv}.

## Project Library

When you install a package in a project with {renv}, the package is installed in the shared library, and a "symlink" is created in the `renv/library` folder of your project. This symlink points to the package in the shared library, so the package is not duplicated in your project. This helps to save space on your local machine and ensures that the package is only downloaded once, even if it is used in multiple projects.

### Symlinks

Notes:

-   The last thing to briefly mention in this section is the package cache. You may be wondering what a *cache* even is, and why it is important. In short, a cache is a temporary storage area that stores frequently accessed data for quick retrieval. In the context of {renv}, the package cache is a shared library that contains the packages used in your projects.
-   This shared library is a huge space saver, especially if you have many projects using the same package.
-   The package cache is a shared library that contains the packages used in your projects. This shared library is a huge space saver, especially if you have many projects using the same package. The cache is built per the minor version of R you use. For example, if you upgrade from R 4.3 to 4.4, then you will need to build a new cache. This can be unexpected if the caching behavior is not known to you. Upgrading from e.g. R 4.3.2 to R 4.3.3 will not cause this, however. The cache will, when needed, contain multiple different versions of the same package and your project will link to the correct version, only downloading the version specified in the `renv.lock` if you don't already have it somewhere in the renv cache. You can access the path to the cache with `renv::paths$cache()`, which I think helps make everything a bit more tangible.

(I think maybe this should be an additional page that discusses the shared library concept in more detail, and caching)

-   briefly describe caching and the fact that there are shared libraries
-   link out to the advanced topic on caching
