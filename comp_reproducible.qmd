---
title: "Reproducibility"
fig-cap-location: bottom
bibliography: references.bib
---

# What is Reproducibility?

## A Brief Definition

> I propose to consider the question "What is reproducibility?" As reproducibility is such a central concept in science, one would think that it would be clearly defined. However, this is not the case. Reproducibility is an elusive concept. It has no single commonly agreed upon definition. Rather, it has many different, and each of these captures central, but different properties of it...
>
> -- <cite>Odd Erik Gundersen</cite> [-@erikgundersen2021]

Gundersen explores many definitions put forward for "reproducibility", but, for the purposes of this tutorial, his exploration of reproducibility is best summarized as "the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators" [@erikgundersen2021]. In principle, this sounds simple enough, but in practice, it can be quite challenging to achieve as there is no single, universally agreed-upon definition of what constitutes "documentation" or how much documentation is necessary to achieve reproducibility. 

One might assume that academic publications provide all of the information required for an independent researcher to reproduce a publication; the requisite background on the topic, the data cleaning choices, and the exact statistical methods employed to arrive at a conclusion are theoretically included in a paper.[^1] In practice, a written publication generally cannot capture all of the nuances of data cleaning, exploration, and analysis employed by the original researchers. As a result, reproducing an analysis result only from a written description is, at best, incredibly time-consuming, and, at worst, an impossible endeavor.

[^1]: Assuming, of course, that the data for the analysis can also be accessed either because it is publicly available or by way of contacting the original researcher.

To address the shortcomings of written descriptions, **researchers must also strive to publish their code, data, and ideally both code and data together such that the *complete* documentation of the project is available to others.**

## Reproducible Code



-   it is one thing to publish or share all of the code for our projects, but we also need to make sure the code works and functions in an intelligible manner for those who may want to reproduce our analyses
-   overlooked aspect of reproducible code is ensuring that the software we used matches what others will use, and, in short, we can create metadata files defining precisely this kind of information.
-   let's look at this in more detail

# The \~Machines\~

## Your Computer

```{r, fig.cap="...and we are very proud of you for that. Traditionally, this has been sufficient for generating all of the analyses and figures needed to author manuscripts.", out.width="85%", echo=FALSE}
knitr::include_graphics("assets/img/works_on_my_machine.jpg")
```

If you are here, you have more than likely created some analysis or software project, and you have presumably done all of the development **by yourself on one specific computer**. If the project works, congratulations!

What about all of the other machines where someone might want to use or contribute to your project though?

## Someone Else's Computer

It is unlikely other users will already have all of the requisite software installed that you used while developing on your computer. A non-exhaustive list of examples where there might be software discrepancies include:

### Examples of Machine/Software Differences
::: {.panel-tabset}


## Operating systems 

- (e.g. Mac vs. Windows vs. Linux)
- Versions of an operating system (e.g. Windows 10 vs. 11)

## Programming languages 

- (e.g. R, Python, MATLAB, Julia, JavaScript)
- Versions of programming languages (e.g. Python 2 and 3, R 3.5.3 and 4.3.3)[^2]

## Software Add-ons

- Add-on packages/libraries for a programming language
-   Versions of packages/libraries
:::

[^2]: Not so fun-fact: some "newer" versions of MacOS come with Python v2 installed because it has some dependencies on this version despite v3 being released in 2008 and not being entirely backwards compatible with v2.

**Do you see some themes here?**

::: callout-important
## Expect No One to Already Have the Required Software

-   Don't expect others to already have the software you rely on
-   Even if others have the software, don't expect them to have the **same version**
:::

## All of the Machines

So this brings us to our core question: how do we set up a project to work on everybody's machines?[^3] **By managing our software dependencies**, described in the next chapter.

[^3]: Within reason; many software and hardware configurations just simply were not meant to be, but most modern programming languages are cross-compatible across recent, major operating systems without issue.

<!-- footnotes -->
