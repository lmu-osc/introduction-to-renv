[
  {
    "objectID": "ex_3.html",
    "href": "ex_3.html",
    "title": "exercise 3",
    "section": "",
    "text": "explicit snapshot of {rmarkdown}?\nGo to the Exercise 3 Folder\nshould use an RMarkown file here to demonstrate that it is important to explicitly add the markdown package to the snapshot sometimes\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Exercises",
      "Explicitly Record"
    ]
  },
  {
    "objectID": "comp_reproducible.html",
    "href": "comp_reproducible.html",
    "title": "Reproducibility",
    "section": "",
    "text": "I propose to consider the question “What is reproducibility?” As reproducibility is such a central concept in science, one would think that it would be clearly defined. However, this is not the case. Reproducibility is an elusive concept. It has no single commonly agreed upon definition. Rather, it has many different, and each of these captures central, but different properties of it…\n– Odd Erik Gundersen (2021)\n\nGundersen explores many definitions put forward for “reproducibility”, and ultimately summarizes reproducibility as “the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators” (Erik Gundersen 2021). What constitutes “documentation”, and a sufficient amount of documentation for that matter, can vary widely, however.\nIn principle, one would assume that academic publications provide all of the information required to reproduce a publication; the requisite background, the data cleaning choices, and the exact statistical methods employed to arrive at a conclusion are theoretically included in a paper.1 In practice, reproducing an analysis result only from a written description is, at best, incredibly time-consuming, and, at worst, an impossible endeavor.\nTo address these shortcomings, researchers must also strive to publish their code, data, and ideally both of these together such that the complete documentation of the project is available to others.\n\n\n\n\nit is one thing to publish or share all of the code for our projects, but we also need to make sure the code works and functions in an intelligible manner for those who may want to reproduce our analyses\noverlooked aspect of reproducible code is ensuring that the software we used matches what others will use, and, in short, we can create metadata files defining precisely this kind of information.\nlet’s look at this in more detail",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#a-brief-definition",
    "href": "comp_reproducible.html#a-brief-definition",
    "title": "Reproducibility",
    "section": "",
    "text": "I propose to consider the question “What is reproducibility?” As reproducibility is such a central concept in science, one would think that it would be clearly defined. However, this is not the case. Reproducibility is an elusive concept. It has no single commonly agreed upon definition. Rather, it has many different, and each of these captures central, but different properties of it…\n– Odd Erik Gundersen (2021)\n\nGundersen explores many definitions put forward for “reproducibility”, and ultimately summarizes reproducibility as “the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators” (Erik Gundersen 2021). What constitutes “documentation”, and a sufficient amount of documentation for that matter, can vary widely, however.\nIn principle, one would assume that academic publications provide all of the information required to reproduce a publication; the requisite background, the data cleaning choices, and the exact statistical methods employed to arrive at a conclusion are theoretically included in a paper.1 In practice, reproducing an analysis result only from a written description is, at best, incredibly time-consuming, and, at worst, an impossible endeavor.\nTo address these shortcomings, researchers must also strive to publish their code, data, and ideally both of these together such that the complete documentation of the project is available to others.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#reproducible-code",
    "href": "comp_reproducible.html#reproducible-code",
    "title": "Reproducibility",
    "section": "",
    "text": "it is one thing to publish or share all of the code for our projects, but we also need to make sure the code works and functions in an intelligible manner for those who may want to reproduce our analyses\noverlooked aspect of reproducible code is ensuring that the software we used matches what others will use, and, in short, we can create metadata files defining precisely this kind of information.\nlet’s look at this in more detail",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#your-computer",
    "href": "comp_reproducible.html#your-computer",
    "title": "Reproducibility",
    "section": "Your Computer",
    "text": "Your Computer\n\n\n\n\n\n…and we are very proud of you for that. Traditionally, this has been sufficient for generating all of the analyses and figures needed to author manuscripts.\n\n\n\n\nIf you are here, you have more than likely created some analysis or software project, and you have presumably done all of the development by yourself on one specific computer. If the project works, congratulations!\nWhat about all of the other machines where someone might want to use or contribute to your project though?",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#someone-elses-computer",
    "href": "comp_reproducible.html#someone-elses-computer",
    "title": "Reproducibility",
    "section": "Someone Else’s Computer",
    "text": "Someone Else’s Computer\nIt is unlikely other users will already have all of the requisite software installed that you used while developing on your computer. A non-exhaustive list of examples where there might be software discrepancies include:\n\n\n\n\n\n\nExamples of Machine/Software Differences\n\n\n\n\nOperating systems (e.g. Mac vs. Windows vs. Linux)\nVersions of an operating system (e.g. Windows 10 vs. 11)\nProgramming languages (e.g. R, Python, MATLAB, Julia, JavaScript)\nVersions of programming languages (e.g. Python 2 and 3, R 3.5.3 and 4.3.3)2\nAdd-on packages/libraries for a programming language\nVersions of packages/libraries\n\n\n\nDo you see some themes here?\n\n\n\n\n\n\nExpect No One to Already Have the Required Software\n\n\n\n\nDon’t expect others to already have the software you rely on\nEven if others have the software, don’t expect them to have the same version",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#all-of-the-machines",
    "href": "comp_reproducible.html#all-of-the-machines",
    "title": "Reproducibility",
    "section": "All of the Machines",
    "text": "All of the Machines\nSo this brings us to our core question: how do we set up a project to work on everybody’s machines?3 By managing our software dependencies, described in the next chapter.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#footnotes",
    "href": "comp_reproducible.html#footnotes",
    "title": "Reproducibility",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAssuming, of course, that the data for the analysis can also be accessed either because it is publicly available or by way of contacting the original researcher.↩︎\nNot so fun-fact: some “newer” versions of MacOS come with Python v2 installed because it has some dependencies on this version despite v3 being released in 2008 and not being entirely backwards compatible with v2.↩︎\nWithin reason; many software and hardware configurations just simply were not meant to be, but most modern programming languages are cross-compatible across recent, major operating systems without issue.↩︎",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "dependencies_in_r.html",
    "href": "dependencies_in_r.html",
    "title": "Dependencies in R",
    "section": "",
    "text": "This page will talk about specifics of dependency management in R including legacy projects like {packrat}, alternative community-driven projects like {groundhogr}, and introduce the {renv} package.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#packages",
    "href": "dependencies_in_r.html#packages",
    "title": "Dependencies in R",
    "section": "Packages",
    "text": "Packages\nPackages can be thought of as the the bundles of software you use for data cleaning, analysis, scripting/programming, and various other activities. What these all have in common is that they build upon the core, basic functionalities of the R language itself. For example, the code below demonstrates how one can filter a data set using only R’s built-in capabilities and by using {dplyr}.\niris[iris$Species == \"setosa\" & iris$Sepal.Length &gt; 4.5, ]\ndplyr::filter(iris, Species == \"setosa\", Sepal.Length &gt; 4.5)\nThe basic R approach is relatively verbose in requiring users to write “iris” twice, requires understanding of [ as an operator, and requires one to remember that indexing in R works [row, column]. Someone programming with R should still know these things, but, in my opinion, the code from {dplyr} is simply easier to write and is more readable to other users. This trivial example is simply meant to highlight some of the main reasons for packages: convenience, and building better tools on top of the language.\n\nPre-Installed Packages\nUpon installing R, the “base” packages are automatically included and you will likely recognize some of the “recommended” packages such as Matrix or survival because they are so ubiquitous in the R ecosystem. That is, either you yourself use some of these packages or packages you use have dependencies on these.\n\ninstalled.packages(priority = c(\"base\", \"recommended\")) %&gt;%\n  as_tibble() %&gt;%\n  select(Package, Version, Priority, Depends, Imports) %&gt;%\n  DT::datatable(options = list(paging=TRUE, scrollY = '300px'))\n\n\n\n\n\n\nin general, packages can live in one of two places: in a Library or in a Repository\nof course, you can also download additional packages from various online sources and you can even create your own packages. However, where are all of these downloaded packages stored? In",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#libraries",
    "href": "dependencies_in_r.html#libraries",
    "title": "Dependencies in R",
    "section": "Libraries",
    "text": "Libraries\n\nSimply put, these are the locations where R packages are stored. The use of the library() function to attach a package to your session, e.g. library(\"dplyr\"), can thus be a bit confusing. In everyday situations, making this distinction is not so important, but for the purposes of this tutorial it is essential to have a more precise definition of a library.\n\n(Xie, Yihui 2014)",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#repositories",
    "href": "dependencies_in_r.html#repositories",
    "title": "Dependencies in R",
    "section": "Repositories",
    "text": "Repositories\nSee also the Posit article on packages, libraries, and repositories.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#packrat",
    "href": "dependencies_in_r.html#packrat",
    "title": "Dependencies in R",
    "section": "{packrat}",
    "text": "{packrat}\n\n{packrat} was for many years the most popular environment/dependency manager package for R. It is maintained by RStudio/Posit, and still receives bug updates. However, it has been soft-deprecated by Posit in favor of the {renv} package since at least April 2020. You should not start new projects with {packrat}, and, if possible, migrate existing projects using {packrat} over to {renv}. That said, it is worth knowing about the existence of this package because old tutorials, projects, and repos may still be using it.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#groundhogr",
    "href": "dependencies_in_r.html#groundhogr",
    "title": "Dependencies in R",
    "section": "{groundhogr}",
    "text": "{groundhogr}\n\n{groundhogr}: this is an open-source project to enable dependency management, and appears to have some popularity within psychological research and possibly other fields. It claims to address some shortcomings of Posit Package Manager (discussed later), but my opinion is that the comparisons are misleading; {groundhogr} must be compared against {renv} combined with PPM, not just against PPM. That said, if your collaborators are using {groundhogr}, then I would recommend learning it to use it for those projects, but the benefits of {renv} make it the overwhelming favorable option.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#renv",
    "href": "dependencies_in_r.html#renv",
    "title": "Dependencies in R",
    "section": "{renv}",
    "text": "{renv}\n\n{renv}: this is another one of Posit’s inventions, and is now in its 1.X.X version iterations meaning it can be considered stable without any breaking changes likely to occur at least for many years. (This would generally be indicated with a minor release to e.g. 1.X+1.X or a major release to e.g. 2.X.X)\n\npros:\n\ndeveloped by professional software engineers at Posit so there is paid support. development, however, is also done open-source so people can independently propose bug fixes or raise issues\nlikely the most popular option already. learning this is a transferable skill between academia and industry.\nintegration with other Posit packages and development pipelines, in particular with CI/CD pipelines on GitHub repos. Another tutorial will discuss CI/CD pipelines, but, in short, using {renv} means you can more easily automate deploying websites through GitHub Pages, checking the development status of R packages you work on, deploy Shiny apps to servers, and run other automated process that require specific package versions because Posit has developed extensions that make this easier.\nit works at a project level (i.e. it should be paired with the use of an R Project/.RProj file). {groundhogr} notes this as a disadvantage so I suppose this requirement is subjective. However, I argue this is a pro because using an R Project structure helps manage your working environment\nNiche: {renv} also has integrations allowing it to be used with Python which can be useful in instances where you have a multi-language project. This would likely only be encountered in complex, multi-team analysis projects or possibly in industry settings.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "advanced_topics.html",
    "href": "advanced_topics.html",
    "title": "Advanced Topics",
    "section": "",
    "text": "Optional: discuss any advanced topics?",
    "crumbs": [
      "Home",
      "Optional Content",
      "Advanced Topics"
    ]
  },
  {
    "objectID": "advanced_topics.html#binder",
    "href": "advanced_topics.html#binder",
    "title": "Advanced Topics",
    "section": "Binder",
    "text": "Binder\n(link to the tutorial if we create one. otherwise, just link to Binder page on renv)",
    "crumbs": [
      "Home",
      "Optional Content",
      "Advanced Topics"
    ]
  },
  {
    "objectID": "outline.html",
    "href": "outline.html",
    "title": "outline",
    "section": "",
    "text": "Software reproducibility\n\n\nwhat is it?\nwhat are the goals?\nwhat needs to be tracked?\n\nvaries based on project needs. a completely reproducible system would have the same versions of software on the same versions of the operating system on the same hardware models. The hardware aspect is difficult enough as is, but softwares also have a variety of different versions, sometimes with minor changes that won’t affect output in any noticeable way, and sometimes those changes are breaking such that code simply no longer runs, or worse, the code still runs but provides different results than expected\n\nwhat are the challenges?\n\n\nDependency Mangement\n\n\nwhat is it? the process/steps for actually controlling and documenting the softwares and specific versions used in a project.\nthese can be managed informally with e.g. a written list of softwares used and versions if needed.\n\npros: there’s little technical knowledge needed here. anyone can type these out.\ncons: inexact, error prone, still requires another user to manually download each package/library by hand, and (big issue) the dependencies of packages are not explicitly declared.\n\nwhat does that last point mean? many packages or libraries that one will download also depend on other software packages. When downloading a package, the required dependencies are generally declared and they should be downloaded too. However, not all packages/libraries will declare specific versions of their dependencies, and a well-developed project will track these too.\nHowever, when including package dependencies, a project that appears to only use 5-10 libraries can actually be using a few hundred. (Note that this process works recursively.)\n\n\nGiven the complexity in all of this, automated solutions for dependency tracking are recommended.\nPython: requirements.txt, Pipfile, and pyproject.toml for pip, pipenv, and poetry respectively can, generally speaking, be used for library management and for declaring necessary Python versions.\n\nthis tutorial focuses on R and {renv} so no further comparison of these will be provided here\n\nR: {renv}, {packrat}, and {groundhogr} are the major options in the R ecosystem\n\n\nWhy {renv}?\n\n\n{packrat} was for many years the most popular environment/dependency manager package for R. It is maintained by RStudio/Posit, and still receives bug updates. However, it has been soft-deprecated by Posit in favor of the {renv} package since at least April 2020. You should not start new projects with {packrat}, and, if possible, migrate existing projects using {packrat} over to {renv}. That said, it is worth knowing about the existence of this package because old tutorials, projects, and repos may still be using it.\n{groundhogr}: this is an open-source project to enable dependency management, and appears to have some popularity within psychological research and possibly other fields. It claims to address some shortcomings of Posit Package Manager (discussed later), but my opinion is that the comparisons are misleading; {groundhogr} must be compared against {renv} combined with PPM, not just against PPM. That said, if your collaborators are using {groundhogr}, then I would recommend learning it to use it for those projects, but the benefits of {renv} make it the overwhelming favorable option.\n{renv}: this is another one of Posit’s inventions, and is now in its 1.X.X version iterations meaning it can be considered stable without any breaking changes likely to occur at least for many years. (This would generally be indicated with a minor release to e.g. 1.X+1.X or a major release to e.g. 2.X.X)\n\npros:\n\ndeveloped by professional software engineers at Posit so there is paid support. development, however, is also done open-source so people can independently propose bug fixes or raise issues\nlikely the most popular option already. learning this is a transferable skill between academia and industry.\nintegration with other Posit packages and development pipelines, in particular with CI/CD pipelines on GitHub repos. Another tutorial will discuss CI/CD pipelines, but, in short, using {renv} means you can more easily automate deploying websites through GitHub Pages, checking the development status of R packages you work on, deploy Shiny apps to servers, and run other automated process that require specific package versions because Posit has developed extensions that make this easier.\nit works at a project level (i.e. it should be paired with the use of an R Project/.RProj file). {groundhogr} notes this as a disadvantage so I suppose this requirement is subjective. However, I argue this is a pro because using an R Project structure helps manage your working environment\nNiche: {renv} also has integrations allowing it to be used with Python which can be useful in instances where you have a multi-language project. This would likely only be encountered in complex, multi-team analysis projects or possibly in industry settings.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the {renv} Tutorial!",
    "section": "",
    "text": "Tutorial Structure\n\n\n\n\n\n\nTip\n\n\n\nThe following software should be installed:\n\nR, recommend v4.3.X or more recent\n{renv}, installed with install.packages(\"renv\") from within R\nRStudio\n\n\n\nThis self-paced tutorial is intended to take 1-2 hours to complete, depending on your previous familiarity with the theoretical and programming components of dependency management and R. Content has been written with novice R users in mind, but this tutorial (hopefully) provides useful information on setting up reproducible computational environments for R users of any skill level.\nThe tutorial is split into the following sections:\n\nBackground introduces a simplified definition and reasoning for reproducibility, its relation to managing software dependencies, and some of the nuances of dependencies in R.\n{renv} discusses the main functions of the {renv} package, and just enough of the underlying mechanics of the package to be useful.\nExercises contains a handful of practical exercises that walk users through the main components of using {renv}, and highlights some common mistakes or issues users might encounter.\nOptional Content dives into some of the more technical details of {renv}, caching, and related topics. This section is only recommended for users with more advanced use cases or troubleshooting needs.\n\n\n\n\n\n\n\nImportant\n\n\n\nAlthough optional for the rest of the tutorial, knowledge of git and GitHub will be necessary for the Exercises especially if you would like to receive feedback or troubleshoot issues remotely.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Overview"
    ]
  },
  {
    "objectID": "starting_details.html",
    "href": "starting_details.html",
    "title": "Getting Started Details",
    "section": "",
    "text": "initiate project with renv::init()\n\ncreates a lockfile\ncreates a renv folder\nadds the line source(\"renv/activate.R\") to your .Rprofile which is automatically run anytime a session with this project is started, i.e. you should aim to open projects that use {renv} with the associated *.Rproj file if it exists\nupdates the .Rbuildignore (only relevant if you’re building an R package, but good to understand this because renv files cannot be included in an R package. There are other mechanisms for managing package dependencies, namely the DESCRIPTION file.)\n\nlockfile details\n\nif you init from a new, empty project then generally the renv.lock will only populate with the version of R you’re currently using and your default repository\n\n\nrenv::init()\n#&gt; The following package(s) will be updated in the lockfile:\n#&gt; \n#&gt; # CRAN -----------------------------------------------------------------------\n#&gt; - renv          [* -&gt; 1.0.7]\n#&gt; \n#&gt; The version of R recorded in the lockfile will be updated:\n#&gt; - R             [* -&gt; 4.4.0]\n#&gt; \n#&gt; - Lockfile written to \"~/Desktop/temporary\".\n\n\n\n\n\n\nCan check the status of your project\n\nrenv::status()\n#&gt; No issues found -- the project is in a consistent state.\n\nwhat does this mean? essentially, it means that renv has not detected any discrepancies between either A) the packages declared in the lockfile and the packages actually used in the project or B) there are no discrepancies in the versions of packages declared in the lockfile and discovered installed + used from the project library.\n{renv} can easily read information from the renv.lock (it’s in a JSON format) so it readily knows what should be in the project\nhowever, how does {renv} know what is being used in the project? for that, the renv:dependencies() function was developed.\n\nyou will likely never need to use this function directly, but being aware of it can be massively beneficial in troubleshooting issues in the future. This function also underlies the renv:status() and to-be-discussed renv::snapshot() functions which are essential.\nas the name suggests, renv::dependencies() detects the packages you are using in your project. it does this by searching for calls to library(), require(), or namespace calls to functions e.g. package::function(). Warning: packages that you have only used interactively (i.e. you never wrote a library(&lt;package&gt;) call in a .R/.Rmd script) will not be detected as a dependency\n\n\n\n\n\n\nthe packages you use in your project also require packages. for example, you might have noticed that when installing 1 new package, R asks you if you want to install 1, 5, 20, etc. additional packages. Simply put, this is because the package you want to install has a tree of dependencies. The dependency tree below demonstrates all of the packages that {dplyr} imports, and the packages that those imports need to import, etc.\n\n\npak::pkg_deps_tree(\"dplyr\", dependencies = NA)\n# Note: the dependencies = NA argument is equivalent \n# to dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\")\n# See below for explanation\n## dplyr 1.1.4 [new][dl] (unknown size)\n## ├─cli 3.6.2 [new][dl] (unknown size)\n## ├─generics 0.1.3 [new][dl] (unknown size)\n## ├─glue 1.7.0 [new][dl] (unknown size)\n## ├─lifecycle 1.0.4 [new][dl] (unknown size)\n## │ ├─cli\n## │ ├─glue\n## │ └─rlang 1.1.3 [new][dl] (unknown size)\n## ├─magrittr 2.0.3 [new][dl] (unknown size)\n## ├─pillar 1.9.0 [new][dl] (unknown size)\n## │ ├─cli\n## │ ├─fansi 1.0.6 [new][dl] (unknown size)\n## │ ├─glue\n## │ ├─lifecycle\n## │ ├─rlang\n## │ ├─utf8 1.2.4 [new][dl] (unknown size)\n## │ └─vctrs 0.6.5 [new][dl] (unknown size)\n## │   ├─cli\n## │   ├─glue\n## │   ├─lifecycle\n## │   └─rlang\n## ├─R6 2.5.1 [new][dl] (unknown size)\n## ├─rlang\n## ├─tibble 3.2.1 [new][dl] (unknown size)\n## │ ├─fansi\n## │ ├─lifecycle\n## │ ├─magrittr\n## │ ├─pillar\n## │ ├─pkgconfig 2.0.3 [new][dl] (unknown size)\n## │ ├─rlang\n## │ └─vctrs\n## ├─tidyselect 1.2.1 [new][dl] (unknown size)\n## │ ├─cli\n## │ ├─glue\n## │ ├─lifecycle\n## │ ├─rlang\n## │ ├─vctrs\n## │ └─withr 3.0.0 [new][dl] (unknown size)\n## └─vctrs\n## \n## Key:  [new] new | [dl] download\n\n\nDependencies\n\nhard: “Depends”, “Imports”, and “LinkingTo”\nsoft: “Suggests” and “Enhances\n\nWith that overview of dependencies() and status(), we come to the last major player, snapshot() which will check your project again for new calls to packages, for updated dependencies, and for changes in the installed package versions (but it will not check to see if there are recent packages available on e.g. CRAN)\n\nrenv::snapshot()\n#&gt; - The lockfile is already up to date.\n\n\n\n\nAs expected, there are no changes; we have not changed anything with the repository. As a simple example, create a new file called my_analysis.R, call library(lme4), and create a simple mixed model.\n\n\n# install.packages(\"lme4\")\nlibrary(lme4)\nlmer(Sepal.Length ~ Sepal.Width + Petal.Width + (1 | Species), data = iris) \n\n\nMake sure to save the file, and then run renv::snapshot() again from the Console\n\n&gt; renv::snapshot()\nThe following package(s) will be updated in the lockfile:\n  \n  # CRAN -----------------------------------------------------------------------\n- boot        [* -&gt; 1.3-30]\n- brio        [* -&gt; 1.1.5]\n- callr       [* -&gt; 3.7.6]\n- cli         [* -&gt; 3.6.2]\n- crayon      [* -&gt; 1.5.2]\n- desc        [* -&gt; 1.4.3]\n- digest      [* -&gt; 0.6.35]\n- evaluate    [* -&gt; 0.23]\n- fansi       [* -&gt; 1.0.6]\n- fs          [* -&gt; 1.6.4]\n- glue        [* -&gt; 1.7.0]\n- jsonlite    [* -&gt; 1.8.8]\n- lattice     [* -&gt; 0.22-6]\n- lifecycle   [* -&gt; 1.0.4]\n- lme4        [* -&gt; 1.1-35.3]\n- magrittr    [* -&gt; 2.0.3]\n- MASS        [* -&gt; 7.3-60.2]\n- Matrix      [* -&gt; 1.7-0]\n- minqa       [* -&gt; 1.2.6]\n- nlme        [* -&gt; 3.1-164]\n- nloptr      [* -&gt; 2.0.3]\n- pillar      [* -&gt; 1.9.0]\n- pkgconfig   [* -&gt; 2.0.3]\n- processx    [* -&gt; 3.8.4]\n- ps          [* -&gt; 1.7.6]\n- R6          [* -&gt; 2.5.1]\n- RcppEigen   [* -&gt; 0.3.4.0.0]\n- rematch2    [* -&gt; 2.1.2]\n- rlang       [* -&gt; 1.1.3]\n- rprojroot   [* -&gt; 2.0.4]\n- tibble      [* -&gt; 3.2.1]\n- utf8        [* -&gt; 1.2.4]\n- vctrs       [* -&gt; 0.6.5]\n- withr       [* -&gt; 3.0.0]\n\n# RSPM -----------------------------------------------------------------------\n- diffobj     [* -&gt; 0.3.5]\n- pkgbuild    [* -&gt; 1.4.4]\n- pkgload     [* -&gt; 1.3.4]\n- praise      [* -&gt; 1.0.0]\n- Rcpp        [* -&gt; 1.0.12]\n- testthat    [* -&gt; 3.2.1.1]\n- waldo       [* -&gt; 0.5.2]\n\nDo you want to proceed? [Y/n]: Y\n\n- Lockfile written to \"~/Desktop/temporary/renv.lock\".\n\n\n\n\n\nbriefly describe caching and the fact that there are shared libraries\nlink out to the advanced topic on caching",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "starting_details.html#initiation",
    "href": "starting_details.html#initiation",
    "title": "Getting Started Details",
    "section": "",
    "text": "initiate project with renv::init()\n\ncreates a lockfile\ncreates a renv folder\nadds the line source(\"renv/activate.R\") to your .Rprofile which is automatically run anytime a session with this project is started, i.e. you should aim to open projects that use {renv} with the associated *.Rproj file if it exists\nupdates the .Rbuildignore (only relevant if you’re building an R package, but good to understand this because renv files cannot be included in an R package. There are other mechanisms for managing package dependencies, namely the DESCRIPTION file.)\n\nlockfile details\n\nif you init from a new, empty project then generally the renv.lock will only populate with the version of R you’re currently using and your default repository\n\n\nrenv::init()\n#&gt; The following package(s) will be updated in the lockfile:\n#&gt; \n#&gt; # CRAN -----------------------------------------------------------------------\n#&gt; - renv          [* -&gt; 1.0.7]\n#&gt; \n#&gt; The version of R recorded in the lockfile will be updated:\n#&gt; - R             [* -&gt; 4.4.0]\n#&gt; \n#&gt; - Lockfile written to \"~/Desktop/temporary\".",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "starting_details.html#package-detection",
    "href": "starting_details.html#package-detection",
    "title": "Getting Started Details",
    "section": "",
    "text": "Can check the status of your project\n\nrenv::status()\n#&gt; No issues found -- the project is in a consistent state.\n\nwhat does this mean? essentially, it means that renv has not detected any discrepancies between either A) the packages declared in the lockfile and the packages actually used in the project or B) there are no discrepancies in the versions of packages declared in the lockfile and discovered installed + used from the project library.\n{renv} can easily read information from the renv.lock (it’s in a JSON format) so it readily knows what should be in the project\nhowever, how does {renv} know what is being used in the project? for that, the renv:dependencies() function was developed.\n\nyou will likely never need to use this function directly, but being aware of it can be massively beneficial in troubleshooting issues in the future. This function also underlies the renv:status() and to-be-discussed renv::snapshot() functions which are essential.\nas the name suggests, renv::dependencies() detects the packages you are using in your project. it does this by searching for calls to library(), require(), or namespace calls to functions e.g. package::function(). Warning: packages that you have only used interactively (i.e. you never wrote a library(&lt;package&gt;) call in a .R/.Rmd script) will not be detected as a dependency\n\n\n\n\n\n\nthe packages you use in your project also require packages. for example, you might have noticed that when installing 1 new package, R asks you if you want to install 1, 5, 20, etc. additional packages. Simply put, this is because the package you want to install has a tree of dependencies. The dependency tree below demonstrates all of the packages that {dplyr} imports, and the packages that those imports need to import, etc.\n\n\npak::pkg_deps_tree(\"dplyr\", dependencies = NA)\n# Note: the dependencies = NA argument is equivalent \n# to dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\")\n# See below for explanation\n## dplyr 1.1.4 [new][dl] (unknown size)\n## ├─cli 3.6.2 [new][dl] (unknown size)\n## ├─generics 0.1.3 [new][dl] (unknown size)\n## ├─glue 1.7.0 [new][dl] (unknown size)\n## ├─lifecycle 1.0.4 [new][dl] (unknown size)\n## │ ├─cli\n## │ ├─glue\n## │ └─rlang 1.1.3 [new][dl] (unknown size)\n## ├─magrittr 2.0.3 [new][dl] (unknown size)\n## ├─pillar 1.9.0 [new][dl] (unknown size)\n## │ ├─cli\n## │ ├─fansi 1.0.6 [new][dl] (unknown size)\n## │ ├─glue\n## │ ├─lifecycle\n## │ ├─rlang\n## │ ├─utf8 1.2.4 [new][dl] (unknown size)\n## │ └─vctrs 0.6.5 [new][dl] (unknown size)\n## │   ├─cli\n## │   ├─glue\n## │   ├─lifecycle\n## │   └─rlang\n## ├─R6 2.5.1 [new][dl] (unknown size)\n## ├─rlang\n## ├─tibble 3.2.1 [new][dl] (unknown size)\n## │ ├─fansi\n## │ ├─lifecycle\n## │ ├─magrittr\n## │ ├─pillar\n## │ ├─pkgconfig 2.0.3 [new][dl] (unknown size)\n## │ ├─rlang\n## │ └─vctrs\n## ├─tidyselect 1.2.1 [new][dl] (unknown size)\n## │ ├─cli\n## │ ├─glue\n## │ ├─lifecycle\n## │ ├─rlang\n## │ ├─vctrs\n## │ └─withr 3.0.0 [new][dl] (unknown size)\n## └─vctrs\n## \n## Key:  [new] new | [dl] download\n\n\nDependencies\n\nhard: “Depends”, “Imports”, and “LinkingTo”\nsoft: “Suggests” and “Enhances\n\nWith that overview of dependencies() and status(), we come to the last major player, snapshot() which will check your project again for new calls to packages, for updated dependencies, and for changes in the installed package versions (but it will not check to see if there are recent packages available on e.g. CRAN)\n\nrenv::snapshot()\n#&gt; - The lockfile is already up to date.\n\n\n\n\nAs expected, there are no changes; we have not changed anything with the repository. As a simple example, create a new file called my_analysis.R, call library(lme4), and create a simple mixed model.\n\n\n# install.packages(\"lme4\")\nlibrary(lme4)\nlmer(Sepal.Length ~ Sepal.Width + Petal.Width + (1 | Species), data = iris) \n\n\nMake sure to save the file, and then run renv::snapshot() again from the Console\n\n&gt; renv::snapshot()\nThe following package(s) will be updated in the lockfile:\n  \n  # CRAN -----------------------------------------------------------------------\n- boot        [* -&gt; 1.3-30]\n- brio        [* -&gt; 1.1.5]\n- callr       [* -&gt; 3.7.6]\n- cli         [* -&gt; 3.6.2]\n- crayon      [* -&gt; 1.5.2]\n- desc        [* -&gt; 1.4.3]\n- digest      [* -&gt; 0.6.35]\n- evaluate    [* -&gt; 0.23]\n- fansi       [* -&gt; 1.0.6]\n- fs          [* -&gt; 1.6.4]\n- glue        [* -&gt; 1.7.0]\n- jsonlite    [* -&gt; 1.8.8]\n- lattice     [* -&gt; 0.22-6]\n- lifecycle   [* -&gt; 1.0.4]\n- lme4        [* -&gt; 1.1-35.3]\n- magrittr    [* -&gt; 2.0.3]\n- MASS        [* -&gt; 7.3-60.2]\n- Matrix      [* -&gt; 1.7-0]\n- minqa       [* -&gt; 1.2.6]\n- nlme        [* -&gt; 3.1-164]\n- nloptr      [* -&gt; 2.0.3]\n- pillar      [* -&gt; 1.9.0]\n- pkgconfig   [* -&gt; 2.0.3]\n- processx    [* -&gt; 3.8.4]\n- ps          [* -&gt; 1.7.6]\n- R6          [* -&gt; 2.5.1]\n- RcppEigen   [* -&gt; 0.3.4.0.0]\n- rematch2    [* -&gt; 2.1.2]\n- rlang       [* -&gt; 1.1.3]\n- rprojroot   [* -&gt; 2.0.4]\n- tibble      [* -&gt; 3.2.1]\n- utf8        [* -&gt; 1.2.4]\n- vctrs       [* -&gt; 0.6.5]\n- withr       [* -&gt; 3.0.0]\n\n# RSPM -----------------------------------------------------------------------\n- diffobj     [* -&gt; 0.3.5]\n- pkgbuild    [* -&gt; 1.4.4]\n- pkgload     [* -&gt; 1.3.4]\n- praise      [* -&gt; 1.0.0]\n- Rcpp        [* -&gt; 1.0.12]\n- testthat    [* -&gt; 3.2.1.1]\n- waldo       [* -&gt; 0.5.2]\n\nDo you want to proceed? [Y/n]: Y\n\n- Lockfile written to \"~/Desktop/temporary/renv.lock\".",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "starting_details.html#a-note-on-caching",
    "href": "starting_details.html#a-note-on-caching",
    "title": "Getting Started Details",
    "section": "",
    "text": "briefly describe caching and the fact that there are shared libraries\nlink out to the advanced topic on caching",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Contributors\nThis site was created by Pat Callahan with contributions and feedback from Florian Pargent.\n\n\nLicense\nPublished under a Creative Commons Attribution-ShareAlike 4.0 International license (CC BY-SA 4.0 Deed).\n\n\n\n\n Back to top"
  },
  {
    "objectID": "intro_dependencies.html",
    "href": "intro_dependencies.html",
    "title": "Software Dependencies",
    "section": "",
    "text": "Figure 1: Dependencies on dependencies on dependencies\n\n\n\nThis page will talk about what software dependencies are, why users should care about them in general, and practical scenarios where one will want to manage them.\n\nwhat is it? the process/steps for actually controlling and documenting the softwares and specific versions used in a project.\nthese can be managed informally with e.g. a written list of softwares used and versions if needed.\n\npros: there’s little technical knowledge needed here. anyone can type these out.\ncons: inexact, error prone, still requires another user to manually download each package/library by hand, and (big issue) the dependencies of packages are not explicitly declared.\n\nwhat does that last point mean? many packages or libraries that one will download also depend on other software packages. When downloading a package, the required dependencies are generally declared and they should be downloaded too. However, not all packages/libraries will declare specific versions of their dependencies, and a well-developed project will track these too.\nHowever, when including package dependencies, a project that appears to only use 5-10 libraries can actually be using a few hundred. (Note that this process works recursively.)\n\n\nGiven the complexity in all of this, automated solutions for dependency tracking are recommended.\nPython: requirements.txt, Pipfile, and pyproject.toml for pip, pipenv, and poetry respectively can, generally speaking, be used for library management and for declaring necessary Python versions.\n\nthis tutorial focuses on R and {renv} so no further comparison of these will be provided here\n\nR: {renv}, {packrat}, and {groundhogr} are the major options in the R ecosystem\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Background",
      "2. Software Dependencies"
    ]
  },
  {
    "objectID": "ex_init_snapshot.html",
    "href": "ex_init_snapshot.html",
    "title": "Initialize and Snapshot",
    "section": "",
    "text": "Getting Started\n\nfork the intro-to-renv-examples repo\nGo to the Exercise 1 folder\ninit renv\ncommit repo changes\n\n\n\nSnapshotting\n\nWe want to observe the process in action\nRun dependencies()\nCreate a new .R file\nPaste this analysis code in the file\n\nstats::lm(Sepal.Length ~ Sepal.Width + Species, data = iris)\n\nRun dependencies() again\nWhat do you notice?\nRun snapshot()\nCommit and push changes\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Exercises",
      "Init and Snapshot"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Introduction to {renv}",
    "section": "",
    "text": "Attribution-ShareAlike 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nAdditional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org.\n\n\n\n Back to top"
  },
  {
    "objectID": "renv_getting_started.html",
    "href": "renv_getting_started.html",
    "title": "{renv}: Getting Started",
    "section": "",
    "text": "This page will talk about installation of the renv package, and how to snapshot so the lockfile updates. Will then talk about how the underlying dependencies() function works to identify the packages in use in the project.\nTalk about how/when to update the library\nTroubleshooting?\nTalk about the package cache at the end of this chapter - a cache is built per the minor version of R you use. e.g. if you upgrade from R 4.3 to 4.4, then you will need to build a new cache. this can be unexpected if the caching behavior is not known to you. upgrading from e.g. R4.3.2 to R4.3.3 will not cause this, however. - the cache will, when needed, contain multiple different versions of same package and your project will link to the correct version, only downloading the version specified in the renv.lock if you don’t already have it somewhere in the renv cache - can access path with renv::paths$cache() which I think helps make everything a bit more tangible",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Getting Started"
    ]
  },
  {
    "objectID": "renv_getting_started.html#initiating-renv",
    "href": "renv_getting_started.html#initiating-renv",
    "title": "{renv}: Getting Started",
    "section": "Initiating {renv}",
    "text": "Initiating {renv}\nWhen using {renv} with your projects, you will likely enter from one of two approaches: from a new project with RStudio, or by adding {renv} to an already existing (or non-RStudio) project.\nEither approach should yield the following results in the directory you’re working within:\n\nCreation of a renv.lock file and a renv folder\nCreation of or additions to the .Rbuildignore and .Rprofile files\n\nFor most purposes, one will only need to have a passing understanding of the renv.lock file which records the\n\nWith a New RStudio Project\nWhen initiating a new project from within RStudio such as a typical .Rproj, a Quarto website, a new R package or similar, you can follow the approximate directions below to check the box that you would like to “Use renv with [your] project.”\nFile -&gt; New Project -&gt; New Directory -&gt; New Project -&gt; [x] Use renv with this project\n\n\nFrom an Existing Project or Folder\nIn essentially all other scenarios, one can initiate {renv} for a project by navigating to your project/folder and running the two commands below.\nlibrary(renv)\ninit()",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Getting Started"
    ]
  },
  {
    "objectID": "renv_getting_started.html#check-status-of-project",
    "href": "renv_getting_started.html#check-status-of-project",
    "title": "{renv}: Getting Started",
    "section": "Check Status of Project",
    "text": "Check Status of Project\nThe project should be in a consistent state after initiating {renv}, and this can be checked by running the renv::status()` function.\nstatus()\nIn short, this function checks that your project is in a “consistent state” by checking for the following:\n\nThat all packages detected in the project are listed in the renv.lock file\nThat all packages in the renv.lock file are actually installed\nThat all installed packages are the correct version",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Getting Started"
    ]
  },
  {
    "objectID": "renv_getting_started.html#updating-renv.lock",
    "href": "renv_getting_started.html#updating-renv.lock",
    "title": "{renv}: Getting Started",
    "section": "Updating renv.lock",
    "text": "Updating renv.lock\nAs you write additional .R, .Rmd, and/or .qmd files for your project, you will presumably employ more and more functions from foreign packages, and these new packages should be captured in the renv.lock file. This can be done by “snapshotting” the project which will initiate a search for calls to library(), require() and namespaced calls to functions e.g. package::function().\nsnapshot()\nRunning the snapshot() function will capture new packages used in your project, and it will update the package versions in the renv.lock file if you have installed new versions to the project you are working in.\nThis is essentially 80% of the work you will ever need to put into creating a project that also uses {renv}. The other major component of using this package will be restoring libraries for either your own projects or for projects shared by others using renv::restore(). This is discussed next in 2. Restoring Another Project, but we strongly recommend reading the details below before proceeding.",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Getting Started"
    ]
  },
  {
    "objectID": "ex_2.html",
    "href": "ex_2.html",
    "title": "Using restore()",
    "section": "",
    "text": "restoring a project\nGo to the Exercise 2 Folder\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Exercises",
      "Restore"
    ]
  },
  {
    "objectID": "restoring_a_project.html",
    "href": "restoring_a_project.html",
    "title": "Restoring Another Project",
    "section": "",
    "text": "Description about how to restore a {renv} library from an existing project\nThree most likely scenarios\n\nFrom a GitHub Repo\n\nclone\nrun restore()\nshould not be anything else to do\n\n\n\nFrom a lockfile\n\nplace the lockfile in the directory you are working on your R project from. ideally you are already using an R Project .Rproj file.\nrun restore()\n\nNote the project argument for restore()\n\n\n\nproject\nThe project directory. If NULL, then the active project will be used. If no project is currently active, then the current working directory is used instead.\n\n\n\nAfter Upgrading R\n\nTopic covered in more detail in the Caching page\nIn short, you will need to restore() projects when upgrading by minor versions of R\n\nsemantic versioning: major.minor.patch so an upgrade from R4.3 to R4.4 will cause you to need to restore() your projects\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "{renv}",
      "3. Restoring A Project"
    ]
  },
  {
    "objectID": "embed_and_use.html",
    "href": "embed_and_use.html",
    "title": "Alternative Workflow: embed() and use()",
    "section": "",
    "text": "https://rstudio.github.io/renv/reference/embed.html\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Optional Content",
      "`embed()` and `use()`"
    ]
  }
]