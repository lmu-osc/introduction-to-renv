[
  {
    "objectID": "dependencies_in_r.html",
    "href": "dependencies_in_r.html",
    "title": "Dependencies in R",
    "section": "",
    "text": "This page covers more specific information regarding dependency management in R including legacy projects like {packrat}, alternative community-driven projects like {groundhogr}, and introduces the {renv} package.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#packages",
    "href": "dependencies_in_r.html#packages",
    "title": "Dependencies in R",
    "section": "Packages",
    "text": "Packages\nPackages are collections of functions, data, and documentation that are bundled together in a single unit. They are the primary way that R users can extend the functionality of the base R language. For example, the {dplyr} package is a popular package for data manipulation that extends the base R language with functions like filter() and mutate(). The code below demonstrates how one can filter a data set using only R’s built-in capabilities and by using the popular data-cleaning package {dplyr}.\niris[iris$Species == \"setosa\" & iris$Sepal.Length &gt; 4.5, ]\ndplyr::filter(iris, Species == \"setosa\", Sepal.Length &gt; 4.5)\nBut why would someone want to accomplish this task in two different ways? Base R already has a large number of built-in functions and data structures that make it possible to work with data!\nHowever, base R can be difficult to use for complex data manipulation tasks, and the syntax can be verbose and overall subjectively difficult to work with. Packages like {dplyr} provide a more user-friendly interface for working with data, and they can make complex data manipulation tasks much easier to accomplish for beginners and advanced R users alike.\nThis example is not meant to highlight the benefits of {dplyr} specifically, but rather to illustrate the general utility of packages in R. Packages are, above all, a way to extend base R to make life easier for users, they provide alternatives to the base R packages, and user-contributed packages are an essential part of the R ecosystem.\n\nPre-Installed Packages\nUpon installing R, you will have access to a number of pre-installed packages. These packages are part of the “base” R distribution and are considered essential for working with R. A list of such packages can be identified by searching your installed packages for the “base” and “recommended” packages (also summarized as “high” priority packages). The code below generates this list of pre-installed packages in R, along with some information about each package.\n\ninstalled.packages(priority = c(\"base\", \"recommended\")) %&gt;%\n  as_tibble() %&gt;%\n  select(Package, Version, Priority, Depends, Imports) %&gt;%\n  DT::datatable(options = list(paging=TRUE, scrollY = '300px', pageLength = 11))\n\n\n\n\n\nYou will likely recognize some of these packages, such as the {stats} package, which contains many of the commonly used statistical functions that are built into R like glm(). Other packages, like {utils} and {survival}, contain functions for other common activities like reading in files and for performing survival analysis, respectively.\nSomewhat confusingly, the base R distribution also includes a package called {base} containing many functions and data structures that are considered essential for working with R. Some references to “base R” are therefore referring to the base package, while others refer to the base distribution of the R language. This distinction is not particularly important for the purposes of this tutorial, but it is worth keeping in mind.\n\n\nUser-Installed Packages\nIn addition to the pre-installed packages, you can also install additional packages from online repositories like CRAN, Bioconductor, and GitHub. You have likely already done this in the past by using the install.packages() function to download from CRAN and/or Bioconductor or devtools::install_github() to get a package from GitHub. Beyond that, there are principally no differences between the pre-installed packages and user-installed packages; they are both just collections of functions, data, and documentation in a defined format.\nPackages, of course, need to be stored somewhere on your computer, and this is where the concept of libraries comes in.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#libraries",
    "href": "dependencies_in_r.html#libraries",
    "title": "Dependencies in R",
    "section": "Libraries",
    "text": "Libraries\nLibraries are directories on your computer1 where R packages are stored. When you install a package, it is downloaded from an online repository and stored in a library on your computer. Because a library is, in effect, simply a directory on your computer, you can have multiple libraries on your computer, and you can specify which library you want to use when you install a package. The .libPaths() function can be used to see the libraries that are currently available on your system, generally one or two paths will be returned.\n# Example of running .libPaths() on a Mac. Results will vary across systems\n.libPaths()\n#&gt; [1] \"/Users/&lt;USER&gt;/Library/R/arm64/4.4/library\"                      \n#&gt; [2] \"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\"\nThe use of separate libraries is important because it allows you to manage different versions of packages and to avoid conflicts between packages that have the same name but different versions. For example, if you have two packages installed that both contain a function called foo(), R needs to know which version of foo() to use when you call it. By storing packages in separate libraries, R can keep track of which foo() you want to use. While managing these “namespace conflicts” is important, the focus of this tutorial, however, is more on the management of libraries and package versions.\nOf course, managing multiple libraries can be cumbersome and requires one to be mindful of which library is being used at any given time for installations and for your current R session. This is where package managers come in, as they can help you manage your libraries and package versions effectively and without having to be an expert on navigating the file system of your computer.\nAs a side note: you may hear people refer to R packages as libraries, likely stemming from the fact that packages are attached to your R session using the library() function. While this generally will not lead to much confusion, it is important to keep in mind this distinction between packages and libraries for the purposes of this tutorial.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#repositories",
    "href": "dependencies_in_r.html#repositories",
    "title": "Dependencies in R",
    "section": "Repositories",
    "text": "Repositories\nA repository is a collection of packages that are available for download from a specific location. The most common repository for R packages is the Comprehensive R Archive Network (CRAN), which hosted 21043 freely available packages at the last time this page was generated on July 10 2024. Another popular repository, Bioconductor, also hosts several thousand packages, but these packages are focused on bioinformatics and computational biology. GitHub is another popular repository for R packages, and many developers use it to host their R packages and make the development process viewable by the public.\nSee also the Posit article on packages, libraries, and repositories.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#packrat",
    "href": "dependencies_in_r.html#packrat",
    "title": "Dependencies in R",
    "section": "{packrat}",
    "text": "{packrat}\nThe {packrat} package was one of the first package managers developed for R, and it was designed to address some of the shortcomings of the base R package management system. {packrat} allows you to create a “snapshot” of your package dependencies, which can be shared with collaborators or used to recreate your working environment at a later date. This can be useful if you are working on a project with multiple collaborators or if you need to reproduce your analysis at a later date.\nIt was, for many years, the most popular environment/dependency manager package for R, and was developed and maintained by RStudio/Posit. However, it has been soft-deprecated by Posit in favor of the {renv} package since at least April 2020. You should not start new projects with {packrat}, and, if possible, migrate existing projects using {packrat} over to {renv}. That said, it is worth knowing about the existence of this package because old tutorials, projects, and repos may still be using it.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#groundhogr",
    "href": "dependencies_in_r.html#groundhogr",
    "title": "Dependencies in R",
    "section": "{groundhogr}",
    "text": "{groundhogr}\n{groundhogr} is a community-driven package manager for R that was developed as an alternative to {packrat} and {renv}. It is designed to be lightweight and easy to use, and it has already gained a following among R users who are looking for an alternative to {packrat}, notably within psychological research and related fields. The example from their website demonstrates how to install packages and specify a date for when the packages should be updated:\ninstall.packages(\"groundhog\")\nlibrary(\"groundhog\")\npkgs &lt;- c(\"rio\",\"metafor\")\ngroundhog.library(pkgs, \"2023-09-01\")\nRegarding the positives of this package and approach:\n\nIt is lightweight and easy to use. Swapping the library() call for groundhog.library() is a simple change to make in your scripts\nThe project is community-driven, meaning that it is developed and maintained by a group of R users who are interested in improving the package management experience in R outside of the Posit ecosystem\n\nHowever, there are also some potential drawbacks to using {groundhogr}:\n\nThe package is still in its early stages of development, so it may not be as stable or reliable as other package managers like {renv}\nThe package may not have as many features as other package managers, so it may not be suitable for all use cases\nLearning {renv} instead of {groundhogr} is a transferable skill between academia and industry, and it is likely to be more widely used than {groundhogr} especially because of the professional support and software development the package receives from Posit.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#renv",
    "href": "dependencies_in_r.html#renv",
    "title": "Dependencies in R",
    "section": "{renv}",
    "text": "{renv}\n{renv} is another one of Posit’s inventions, and is designed to be lightweight, easy to use, and to work well with other Posit packages and CI/CD development pipelines. A separate tutorial will discuss CI/CD pipelines in detail, but, in short, using {renv} with your R projects will allow you to easily automate a variety of tasks like publishing Shiny apps, deploying website updates through GitHub Pages, checking the development status of R packages you create, and more. These benefits may seem a bit less tangible if you are new to R, but they are very important both for professional software development and for tasks that can make your work significantly easier in the long run. With regards to reproducibility, {renv} allows you to create a “snapshot” of your package dependencies, which can be shared with collaborators or used to recreate your working environment at a later date.\nMoreover, this package can be considered a relatively stable package as it has moved beyond it’s initial development stages into a version 1 release (currently at version 1.0.7). It is maintained by professional software engineers at Posit, and also receives open-source contributions and bug reports via the public GitHub repository.\n{renv} is likely the most popular option for package management in R, and is a highly transferable skill between both academia and industry settings2. Thus, it is the one that I recommend using for new projects, and will be the focus of the rest of this tutorial on dependency management in R.\nIn comparison to {groundhogr}, one of the main drawbacks of {renv} is that it is project-based, meaning that you need to create an R Project (.RProj file) to use {renv} whereas {groundhogr} allows you to simply embed the function groundhog.library(pkg, date) into any R file. This is not a drawback in my opinion, as using an R Project structure helps manage your working environment, but it is worth noting that the default workflow for {renv} is not as flexible as {groundhogr} in this regard. However, {renv} also offers a similar workflow to {groundhogr} via the embed() and use() functions discussed in the supplementary material of this tutorial.",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#footnotes",
    "href": "dependencies_in_r.html#footnotes",
    "title": "Dependencies in R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nStrictly speaking, the libraries do not have to be on your computer, but they do need to be accessible to your R session. For example, you could store your libraries on a network drive or on a cloud storage service like Dropbox, but this is not at all recommended because it can lead to performance issues and other problems. A more likely scenario is that you use RStudio through Posit Cloud (i.e. RStudio on a web interface) in which case the available libraries are stored and managed either by Posit or by an IT group for your institution on a separate server.↩︎\nNiche: {renv} also has integrations allowing it to be used with Python which can be useful in instances where you have a multi-language project. This would likely only be encountered in complex, multi-team analysis projects or possibly in industry settings.↩︎",
    "crumbs": [
      "Home",
      "Background",
      "3. Dependencies in R"
    ]
  },
  {
    "objectID": "advanced_topics.html",
    "href": "advanced_topics.html",
    "title": "Advanced Topics",
    "section": "",
    "text": "Optional: discuss any advanced topics?",
    "crumbs": [
      "Home",
      "Optional Content",
      "Advanced Topics"
    ]
  },
  {
    "objectID": "advanced_topics.html#binder",
    "href": "advanced_topics.html#binder",
    "title": "Advanced Topics",
    "section": "Binder",
    "text": "Binder\n(link to the tutorial if we create one. otherwise, just link to Binder page on renv)",
    "crumbs": [
      "Home",
      "Optional Content",
      "Advanced Topics"
    ]
  },
  {
    "objectID": "comp_reproducible.html",
    "href": "comp_reproducible.html",
    "title": "Reproducibility",
    "section": "",
    "text": "I propose to consider the question “What is reproducibility?” As reproducibility is such a central concept in science, one would think that it would be clearly defined. However, this is not the case. Reproducibility is an elusive concept. It has no single commonly agreed upon definition. Rather, it has many different, and each of these captures central, but different properties of it…\n– Odd Erik Gundersen (2021)\n\nGundersen explores many definitions put forward for “reproducibility”, but, for the purposes of this tutorial, his exploration of reproducibility is best summarized as “the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators” (Erik Gundersen 2021).\nIn principle, this sounds simple enough–provide others with enough information, and they should be able to reproduce your work! Achieving this in practice is, of course, a vastly complex endeavor that requires careful planning and execution. Above all, opinions on what constitutes sufficient “documentation” or how much documentation is necessary to achieve reproducibility can vary widely.\nOne might assume that academic publications provide all of the information required for an independent researcher to reproduce a publication; the requisite background on the topic, the data cleaning choices, and the exact statistical methods employed to arrive at a conclusion are theoretically included in a paper.1 In practice, a written publication generally cannot capture all of the nuances of data cleaning, exploration, and analysis employed by the original researchers. As a result, reproducing an analysis result only from a written description is, at best, incredibly time-consuming, and, at worst, an impossible endeavor.\nTo address the shortcomings of written descriptions, researchers must also strive to publish their code, data, and ideally both code and data together such that the complete documentation of the project is available to others.\n\n\n\nWhy should we concern ourselves with making reproducible code specifically? From a scientific perspective, reproducible code is essential in allowing other researchers to verify findings, to build upon existing work, and to ensure that the scientific process is transparent and trustworthy. From a practical perspective, reproducible code can save time and effort in the long run by making it easier to revisit and understand one’s own work, to make debugging and troubleshooting easier, and to collaborate with others.\nIn the context of this tutorial, we will focus on the practical aspects of making code reproducible. This mainly means taking steps to ensure that the code we write can be run on other machines, by other people, and in the future. In other words, we want to make sure that our code is portable and future-proof by ensuring the software originally used in creating our code is the same software used by others. Let’s look at this in more detail.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#a-brief-definition",
    "href": "comp_reproducible.html#a-brief-definition",
    "title": "Reproducibility",
    "section": "",
    "text": "I propose to consider the question “What is reproducibility?” As reproducibility is such a central concept in science, one would think that it would be clearly defined. However, this is not the case. Reproducibility is an elusive concept. It has no single commonly agreed upon definition. Rather, it has many different, and each of these captures central, but different properties of it…\n– Odd Erik Gundersen (2021)\n\nGundersen explores many definitions put forward for “reproducibility”, but, for the purposes of this tutorial, his exploration of reproducibility is best summarized as “the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators” (Erik Gundersen 2021).\nIn principle, this sounds simple enough–provide others with enough information, and they should be able to reproduce your work! Achieving this in practice is, of course, a vastly complex endeavor that requires careful planning and execution. Above all, opinions on what constitutes sufficient “documentation” or how much documentation is necessary to achieve reproducibility can vary widely.\nOne might assume that academic publications provide all of the information required for an independent researcher to reproduce a publication; the requisite background on the topic, the data cleaning choices, and the exact statistical methods employed to arrive at a conclusion are theoretically included in a paper.1 In practice, a written publication generally cannot capture all of the nuances of data cleaning, exploration, and analysis employed by the original researchers. As a result, reproducing an analysis result only from a written description is, at best, incredibly time-consuming, and, at worst, an impossible endeavor.\nTo address the shortcomings of written descriptions, researchers must also strive to publish their code, data, and ideally both code and data together such that the complete documentation of the project is available to others.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#reproducible-code",
    "href": "comp_reproducible.html#reproducible-code",
    "title": "Reproducibility",
    "section": "",
    "text": "Why should we concern ourselves with making reproducible code specifically? From a scientific perspective, reproducible code is essential in allowing other researchers to verify findings, to build upon existing work, and to ensure that the scientific process is transparent and trustworthy. From a practical perspective, reproducible code can save time and effort in the long run by making it easier to revisit and understand one’s own work, to make debugging and troubleshooting easier, and to collaborate with others.\nIn the context of this tutorial, we will focus on the practical aspects of making code reproducible. This mainly means taking steps to ensure that the code we write can be run on other machines, by other people, and in the future. In other words, we want to make sure that our code is portable and future-proof by ensuring the software originally used in creating our code is the same software used by others. Let’s look at this in more detail.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#your-computer",
    "href": "comp_reproducible.html#your-computer",
    "title": "Reproducibility",
    "section": "Your Computer",
    "text": "Your Computer\nGetting code to work on your own machine is usually not too difficult. You can install the software you need, set up your environment, and run your code.\nWhat about all of the other machines where someone might want to use or contribute to your project though?\n\n\n\n\n\nTraditionally, this has been sufficient for generating all of the analyses and figures needed to author manuscripts.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#someone-elses-computer",
    "href": "comp_reproducible.html#someone-elses-computer",
    "title": "Reproducibility",
    "section": "Someone Else’s Computer",
    "text": "Someone Else’s Computer\nWhen you share your code with others, however, you are asking them to run your code on their machine, and it is unlikely that their machine is set up exactly like yours. They might not have the same software installed, or they might have different versions of the software you used. A non-exhaustive list of examples where there might be software discrepancies are detailed below.\n\nExamples of Machine & Software Differences\n\nOperating systemsProgramming languagesSoftware Add-ons\n\n\n\nIt’s already well-known that different operating systems can have different software requirements. For example, some software might only be available on Windows, while others might only be available on MacOS or Linux.\nHowever, it is also important to consider that different versions of the same operating system can have different software requirements. For example, some software might only be compatible with Windows 10 and not Windows 11.\n\n\n\n\n(e.g. R, Python, MATLAB, Julia, JavaScript)\nVersions of programming languages (e.g. Python 2 and 3, R 3.5.3 and 4.3.3)2\n\n\n\n\n\nAdd-on packages/libraries for a programming language\nVersions of packages/libraries\n\n\n\n\nThe point of this is to demonstrate how many degrees of freedom can exist in the software environment of a project. If you have ever tried to run someone else’s code and it didn’t work, it was likely due to one of these reasons.\nMoreover, it’s not possible to manage all of these differences manually. For example, you can’t just tell someone to install Python v3.8.2, R v4.0.3, and a specific version of a package. This is not only impractical but also not a good use of time.\nDo you see some themes here?\n\n\n\n\n\n\nExpect No One to Already Have the Required Software\n\n\n\n\nDon’t expect others to already have the software you rely on\nEven if others have the software, don’t expect them to have the same version",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#all-of-the-machines",
    "href": "comp_reproducible.html#all-of-the-machines",
    "title": "Reproducibility",
    "section": "All of the Machines",
    "text": "All of the Machines\nSo this brings us to our core question: how do we set up a project to work on everybody’s machines?3 By managing our software dependencies, described in the next chapter.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#footnotes",
    "href": "comp_reproducible.html#footnotes",
    "title": "Reproducibility",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAssuming, of course, that the data for the analysis can also be accessed either because it is publicly available or by way of contacting the original researcher.↩︎\nNot so fun-fact: some “newer” versions of MacOS come with Python v2 installed because the OS has some dependencies on this version despite v3 being released in 2008; Python v3 is not entirely backwards compatible with v2.↩︎\nWithin reason; many software and hardware configurations just simply were not meant to be, but most modern programming languages are cross-compatible across recent, major operating systems without issue.↩︎",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "renv_getting_started.html",
    "href": "renv_getting_started.html",
    "title": "{renv}: Getting Started",
    "section": "",
    "text": "This page will talk about installation of the renv package, and how to snapshot so the lockfile updates. Will then talk about how the underlying dependencies() function works to identify the packages in use in the project.\nTalk about how/when to update the library\nTroubleshooting?\nTalk about the package cache at the end of this chapter - a cache is built per the minor version of R you use. e.g. if you upgrade from R 4.3 to 4.4, then you will need to build a new cache. this can be unexpected if the caching behavior is not known to you. upgrading from e.g. R4.3.2 to R4.3.3 will not cause this, however. - the cache will, when needed, contain multiple different versions of same package and your project will link to the correct version, only downloading the version specified in the renv.lock if you don’t already have it somewhere in the renv cache - can access path with renv::paths$cache() which I think helps make everything a bit more tangible",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Getting Started"
    ]
  },
  {
    "objectID": "renv_getting_started.html#initiating-renv",
    "href": "renv_getting_started.html#initiating-renv",
    "title": "{renv}: Getting Started",
    "section": "Initiating {renv}",
    "text": "Initiating {renv}\nWhen using or adding {renv} to one of your projects, you will likely enter from one of two approaches: either from a new project with RStudio, or by adding {renv} to an already existing (or non-RStudio) project.\nEither approach should yield the following results in the directory you’re working within:\n\nCreation of a renv.lock file and a renv folder\nCreation of or additions to the .Rbuildignore and .Rprofile files\nA renv folder will be created in the project directory (for {renv} version 1.0.0 and above)\n\nFor most purposes, one will only need to have a passing understanding of the renv.lock file which records the packages used in the project and their versions. The renv folder is where the packages are stored, and the .Rbuildignore and .Rprofile files are used to ensure that the project is reproducible and that the correct packages are loaded when the project is opened.\n** Note that if you are using version control, you should not add the renv folder to tracking. A more detailed explanation is available in the Advanced Topics section, but the TL;DR is: the renv folder is not necessary for the project to be reproducible, and the project should be rebuilt from the renv.lock file. **\n\nWith a New RStudio Project\nWhen initiating a new project from within RStudio such as a typical .Rproj, a Quarto website, a new R package or similar, you can follow the approximate directions below to check the box that you would like to “Use renv with [your] project.”\nFile -&gt; New Project -&gt; New Directory -&gt; New Project -&gt; [x] Use renv with this project\n\n\n\nFrom an Existing Project or Folder\nIn essentially all other scenarios, one can initiate {renv} for a project by navigating to your project/folder and running the two commands below.\ninstall.packages(\"renv\")\n\nlibrary(renv)\ninit()",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Getting Started"
    ]
  },
  {
    "objectID": "renv_getting_started.html#check-status-of-project",
    "href": "renv_getting_started.html#check-status-of-project",
    "title": "{renv}: Getting Started",
    "section": "Check Status of Project",
    "text": "Check Status of Project\nThe project should be in a consistent state after initiating {renv}, and this can be checked by running the renv::status() function.\nstatus()\nIn short, this function checks that your project is in a “consistent state” by checking for the following:\n\nThat all packages detected in the project are listed in the renv.lock file\nThat all packages in the renv.lock file are actually installed\nThat all installed packages are the correct version",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Getting Started"
    ]
  },
  {
    "objectID": "renv_getting_started.html#updating-renv.lock",
    "href": "renv_getting_started.html#updating-renv.lock",
    "title": "{renv}: Getting Started",
    "section": "Updating renv.lock",
    "text": "Updating renv.lock\nAs you write additional .R, .Rmd, and/or .qmd files for your project, you will presumably employ more and more functions from foreign packages, and these new packages should be captured in the renv.lock file. This can be done by “snapshotting” the project which will initiate a search for calls to library(), require() and namespaced calls to functions e.g. package::function().\nsnapshot()\nRunning the snapshot() function will capture new packages used in your project, and it will update the package versions in the renv.lock file if you have installed new versions to the project you are working in.\nThis is essentially 80% of the work you will ever need to put into creating a project that also uses {renv}. The other major component of using this package will be restoring libraries for either your own projects or for projects shared by others using renv::restore(). This is discussed next in Restoring A Project, but we strongly recommend reading the details of Understanding {renv} first.",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Getting Started"
    ]
  },
  {
    "objectID": "outline.html",
    "href": "outline.html",
    "title": "outline",
    "section": "",
    "text": "Software reproducibility\n\n\nwhat is it?\nwhat are the goals?\nwhat needs to be tracked?\n\nvaries based on project needs. a completely reproducible system would have the same versions of software on the same versions of the operating system on the same hardware models. The hardware aspect is difficult enough as is, but softwares also have a variety of different versions, sometimes with minor changes that won’t affect output in any noticeable way, and sometimes those changes are breaking such that code simply no longer runs, or worse, the code still runs but provides different results than expected\n\nwhat are the challenges?\n\n\nDependency Mangement\n\n\nwhat is it? the process/steps for actually controlling and documenting the softwares and specific versions used in a project.\nthese can be managed informally with e.g. a written list of softwares used and versions if needed.\n\npros: there’s little technical knowledge needed here. anyone can type these out.\ncons: inexact, error prone, still requires another user to manually download each package/library by hand, and (big issue) the dependencies of packages are not explicitly declared.\n\nwhat does that last point mean? many packages or libraries that one will download also depend on other software packages. When downloading a package, the required dependencies are generally declared and they should be downloaded too. However, not all packages/libraries will declare specific versions of their dependencies, and a well-developed project will track these too.\nHowever, when including package dependencies, a project that appears to only use 5-10 libraries can actually be using a few hundred. (Note that this process works recursively.)\n\n\nGiven the complexity in all of this, automated solutions for dependency tracking are recommended.\nPython: requirements.txt, Pipfile, and pyproject.toml for pip, pipenv, and poetry respectively can, generally speaking, be used for library management and for declaring necessary Python versions.\n\nthis tutorial focuses on R and {renv} so no further comparison of these will be provided here\n\nR: {renv}, {packrat}, and {groundhogr} are the major options in the R ecosystem\n\n\nWhy {renv}?\n\n\n{packrat} was for many years the most popular environment/dependency manager package for R. It is maintained by RStudio/Posit, and still receives bug updates. However, it has been soft-deprecated by Posit in favor of the {renv} package since at least April 2020. You should not start new projects with {packrat}, and, if possible, migrate existing projects using {packrat} over to {renv}. That said, it is worth knowing about the existence of this package because old tutorials, projects, and repos may still be using it.\n{groundhogr}: this is an open-source project to enable dependency management, and appears to have some popularity within psychological research and possibly other fields. It claims to address some shortcomings of Posit Package Manager (discussed later), but my opinion is that the comparisons are misleading; {groundhogr} must be compared against {renv} combined with PPM, not just against PPM. That said, if your collaborators are using {groundhogr}, then I would recommend learning it to use it for those projects, but the benefits of {renv} make it the overwhelming favorable option.\n{renv}: this is another one of Posit’s inventions, and is now in its 1.X.X version iterations meaning it can be considered stable without any breaking changes likely to occur at least for many years. (This would generally be indicated with a minor release to e.g. 1.X+1.X or a major release to e.g. 2.X.X)\n\npros:\n\ndeveloped by professional software engineers at Posit so there is paid support. development, however, is also done open-source so people can independently propose bug fixes or raise issues\nlikely the most popular option already. learning this is a transferable skill between academia and industry.\nintegration with other Posit packages and development pipelines, in particular with CI/CD pipelines on GitHub repos. Another tutorial will discuss CI/CD pipelines, but, in short, using {renv} means you can more easily automate deploying websites through GitHub Pages, checking the development status of R packages you work on, deploy Shiny apps to servers, and run other automated process that require specific package versions because Posit has developed extensions that make this easier.\nit works at a project level (i.e. it should be paired with the use of an R Project/.RProj file). {groundhogr} notes this as a disadvantage so I suppose this requirement is subjective. However, I argue this is a pro because using an R Project structure helps manage your working environment\nNiche: {renv} also has integrations allowing it to be used with Python which can be useful in instances where you have a multi-language project. This would likely only be encountered in complex, multi-team analysis projects or possibly in industry settings.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "restoring_a_project.html",
    "href": "restoring_a_project.html",
    "title": "Restoring Another Project",
    "section": "",
    "text": "Description about how to restore a {renv} library from an existing project\nThree most likely scenarios\n\nFrom a GitHub Repo\n\nclone\nrun restore()\nshould not be anything else to do\n\n\n\nFrom a lockfile\n\nplace the lockfile in the directory you are working on your R project from. ideally you are already using an R Project .Rproj file.\nrun restore()\n\nNote the project argument for restore()\n\n\n\nproject\nThe project directory. If NULL, then the active project will be used. If no project is currently active, then the current working directory is used instead.\n\n\n\nAfter Upgrading R\n\nTopic covered in more detail in the Caching page\nIn short, you will need to restore() projects when upgrading by minor versions of R\n\nsemantic versioning: major.minor.patch so an upgrade from R4.3 to R4.4 will cause you to need to restore() your projects\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "{renv}",
      "3. Restoring A Project"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Introduction to {renv}",
    "section": "",
    "text": "Attribution-ShareAlike 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nAdditional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org.\n\n\n\n Back to top"
  },
  {
    "objectID": "ex_2.html",
    "href": "ex_2.html",
    "title": "Using restore()",
    "section": "",
    "text": "restoring a project\nGo to the Exercise 2 Folder\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Exercises",
      "Restore"
    ]
  },
  {
    "objectID": "ex_init_snapshot.html",
    "href": "ex_init_snapshot.html",
    "title": "Initialize and Snapshot",
    "section": "",
    "text": "Getting Started\n\nfork the intro-to-renv-examples repo\nGo to the Exercise 1 folder\ninit renv\ncommit repo changes\n\n\n\nSnapshotting\n\nWe want to observe the process in action\nRun dependencies()\nCreate a new .R file\nPaste this analysis code in the file\n\nstats::lm(Sepal.Length ~ Sepal.Width + Species, data = iris)\n\nRun dependencies() again\nWhat do you notice?\nRun snapshot()\nCommit and push changes\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Exercises",
      "Init and Snapshot"
    ]
  },
  {
    "objectID": "embed_and_use.html",
    "href": "embed_and_use.html",
    "title": "Alternative Workflow: embed() and use()",
    "section": "",
    "text": "https://rstudio.github.io/renv/reference/embed.html\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Optional Content",
      "`embed()` and `use()`"
    ]
  },
  {
    "objectID": "starting_details.html#initiation",
    "href": "starting_details.html#initiation",
    "title": "Getting Started Details",
    "section": "Initiation",
    "text": "Initiation\nWhen initiating a project with {renv}, the following steps are taken automatically:\n\nCreation of a lockfile, renv.lock which records the version of R in use, the default download repository, and the packages used in the project.\nCreation of a renv folder which contains the project library1, a settings file, and a staging area for package installation\nAddition of the line source(\"renv/activate.R\") to your .Rprofile. This file is automatically run anytime a project session is started by e.g. opening the *.Rproj file. This line ensures that the project library is used in the session, not the global library\nUpdates the .Rbuildignore to include the renv folder and the renv.lock file. This is only relevant if you’re building an R package.\n\n\nInitiation Example\nInitiating {renv} in a project should print the following to the console:\nrenv::init()\n#&gt; The following package(s) will be updated in the lockfile:\n#&gt; \n#&gt; # CRAN -----------------------------------------------------------------------\n#&gt; - renv          [* -&gt; 1.0.7]\n#&gt; \n#&gt; The version of R recorded in the lockfile will be updated:\n#&gt; - R             [* -&gt; 4.4.0]\n#&gt; \n#&gt; - Lockfile written to \"~/Desktop/temporary\".\nAnd the directory structure in a new project called temp would look like this:\nfs::dir_tree(recurse = 2)\n#&gt; .\n#&gt; ├── renv\n#&gt; │   ├── activate.R\n#&gt; │   ├── library\n#&gt; │   │   └── macos\n#&gt; │   ├── settings.json\n#&gt; │   └── staging\n#&gt; ├── renv.lock\n#&gt; └── temp.Rproj",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "starting_details.html#package-detection",
    "href": "starting_details.html#package-detection",
    "title": "Getting Started Details",
    "section": "Package Detection",
    "text": "Package Detection\n{renv} is designed to detect the packages you are using in your project. Before discussing the details of how {renv} detects packages, it is important to understand dependencies in some detail.\n\n\nDependencies\nAt the first degree, you depend on packages to perform your analysis or for your project, and you likely have included these packages in your project via calls to library(), require(), or namespaced calls e.g. package::function(). It is quite obvious that these packages are dependencies of your project, and should be included in the renv.lock file.\nHowever, how does {renv} detect what packages are being used in the project? The renv:dependencies() function! This function works by searching all R-related files (e.g. .R, .Rmd, .qmd) for calls to packages. It is important to note that this function only detects packages that are actually used and properly declared in the project. Packages that are not used and packages that you use interactively (i.e. you never wrote a library(&lt;package&gt;) call in a .R/.Rmd script) will not be detected as a dependency.\nYou will likely never need to use renv::dependencies() directly, but being aware of what it does can be massively beneficial in troubleshooting issues in the future. More importantly, this function also underlies the renv:status() and renv::snapshot() functions which are essential for using {renv}.\n\n\nDependencies of Dependencies\n\nthe packages you use in your project also require packages. for example, you might have noticed that when installing 1 new package, R asks you if you want to install 1, 5, 20, etc. additional packages. Simply put, this is because the package you want to install has a tree of dependencies. The dependency tree below demonstrates all of the packages that {dplyr} imports, and the packages that those imports need to import, etc.\n\n\npak::pkg_deps_tree(\"dplyr\", dependencies = NA)\n#&gt; ℹ Loading metadata database\n#&gt; ✔ Loading metadata database ... done\n#&gt; \n#&gt; dplyr 1.1.4 ✨🔧 ⬇ (1.60 MB)\n#&gt; ├─cli 3.6.3 ✨🔧 ⬇ (1.39 MB)\n#&gt; ├─generics 0.1.3 ✨ ⬇ (81.91 kB)\n#&gt; ├─glue 1.7.0 ✨🔧 ⬇ (159.50 kB)\n#&gt; ├─lifecycle 1.0.4 ✨ ⬇ (124.78 kB)\n#&gt; │ ├─cli\n#&gt; │ ├─glue\n#&gt; │ └─rlang 1.1.4 ✨🔧 ⬇ (1.89 MB)\n#&gt; ├─magrittr 2.0.3 ✨🔧 ⬇ (233.52 kB)\n#&gt; ├─pillar 1.9.0 ✨ ⬇ (652.06 kB)\n#&gt; │ ├─cli\n#&gt; │ ├─fansi 1.0.6 ✨🔧 ⬇ (383.06 kB)\n#&gt; │ ├─glue\n#&gt; │ ├─lifecycle\n#&gt; │ ├─rlang\n#&gt; │ ├─utf8 1.2.4 ✨🔧 ⬇ (206.91 kB)\n#&gt; │ └─vctrs 0.6.5 ✨🔧 ⬇ (1.89 MB)\n#&gt; │   ├─cli\n#&gt; │   ├─glue\n#&gt; │   ├─lifecycle\n#&gt; │   └─rlang\n#&gt; ├─R6 2.5.1 ✨ ⬇ (83.20 kB)\n#&gt; ├─rlang\n#&gt; ├─tibble 3.2.1 ✨🔧 ⬇ (688.89 kB)\n#&gt; │ ├─fansi\n#&gt; │ ├─lifecycle\n#&gt; │ ├─magrittr\n#&gt; │ ├─pillar\n#&gt; │ ├─pkgconfig 2.0.3 ✨ ⬇ (18.45 kB)\n#&gt; │ ├─rlang\n#&gt; │ └─vctrs\n#&gt; ├─tidyselect 1.2.1 ✨🔧 ⬇ (224.68 kB)\n#&gt; │ ├─cli\n#&gt; │ ├─glue\n#&gt; │ ├─lifecycle\n#&gt; │ ├─rlang\n#&gt; │ ├─vctrs\n#&gt; │ └─withr 3.0.0 ✨ ⬇ (242.00 kB)\n#&gt; └─vctrs\n#&gt; \n#&gt; Key:  ✨ new |  ⬇ download | 🔧 compile\n\n\nDependencies\n\nhard: “Depends”, “Imports”, and “LinkingTo”\nsoft: “Suggests” and “Enhances\n\nWith that overview of dependencies() and status(), we come to the last major player, snapshot() which will check your project again for new calls to packages, for updated dependencies, and for changes in the installed package versions (but it will not check to see if there are recent packages available on e.g. CRAN)",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "starting_details.html#status-snapshot-status",
    "href": "starting_details.html#status-snapshot-status",
    "title": "Getting Started Details",
    "section": "Status, Snapshot, Status",
    "text": "Status, Snapshot, Status\n\nCan check the status of your project\n\nrenv::status()\n#&gt; No issues found -- the project is in a consistent state.\n\nwhat does this mean? essentially, it means that renv has not detected any discrepancies between either A) the packages declared in the lockfile and the packages actually used in the project or B) there are no discrepancies in the versions of packages declared in the lockfile and discovered installed + used from the project library.\n{renv} can easily read information from the renv.lock (it’s in a JSON format) so it readily knows what should be in the project\n\nrenv::snapshot()\n#&gt; - The lockfile is already up to date.\n\nA Simple Example\n\nAs expected, there are no changes; we have not changed anything with the repository. As a simple example, create a new file called my_analysis.R, call library(lme4), and create a simple mixed model.\n\n\n# install.packages(\"lme4\")\nlibrary(lme4)\nlmer(Sepal.Length ~ Sepal.Width + Petal.Width + (1 | Species), data = datasets::iris) \n\n\nMake sure to save the file, and then run renv::snapshot() again from the Console\n\n\n&gt; renv::snapshot()\nThe following package(s) will be updated in the lockfile:\n  \n  # CRAN -----------------------------------------------------------------------\n- boot        [* -&gt; 1.3-30]\n- brio        [* -&gt; 1.1.5]\n- callr       [* -&gt; 3.7.6]\n- cli         [* -&gt; 3.6.2]\n- crayon      [* -&gt; 1.5.2]\n- desc        [* -&gt; 1.4.3]\n- digest      [* -&gt; 0.6.35]\n- evaluate    [* -&gt; 0.23]\n- fansi       [* -&gt; 1.0.6]\n- fs          [* -&gt; 1.6.4]\n- glue        [* -&gt; 1.7.0]\n- jsonlite    [* -&gt; 1.8.8]\n- lattice     [* -&gt; 0.22-6]\n- lifecycle   [* -&gt; 1.0.4]\n- lme4        [* -&gt; 1.1-35.3]\n- magrittr    [* -&gt; 2.0.3]\n- MASS        [* -&gt; 7.3-60.2]\n- Matrix      [* -&gt; 1.7-0]\n- minqa       [* -&gt; 1.2.6]\n- nlme        [* -&gt; 3.1-164]\n- nloptr      [* -&gt; 2.0.3]\n- pillar      [* -&gt; 1.9.0]\n- pkgconfig   [* -&gt; 2.0.3]\n- processx    [* -&gt; 3.8.4]\n- ps          [* -&gt; 1.7.6]\n- R6          [* -&gt; 2.5.1]\n- RcppEigen   [* -&gt; 0.3.4.0.0]\n- rematch2    [* -&gt; 2.1.2]\n- rlang       [* -&gt; 1.1.3]\n- rprojroot   [* -&gt; 2.0.4]\n- tibble      [* -&gt; 3.2.1]\n- utf8        [* -&gt; 1.2.4]\n- vctrs       [* -&gt; 0.6.5]\n- withr       [* -&gt; 3.0.0]\n\n# RSPM -----------------------------------------------------------------------\n- diffobj     [* -&gt; 0.3.5]\n- pkgbuild    [* -&gt; 1.4.4]\n- pkgload     [* -&gt; 1.3.4]\n- praise      [* -&gt; 1.0.0]\n- Rcpp        [* -&gt; 1.0.12]\n- testthat    [* -&gt; 3.2.1.1]\n- waldo       [* -&gt; 0.5.2]\n\nDo you want to proceed? [Y/n]: Y\n\n- Lockfile written to \"~/Desktop/temporary/renv.lock\".",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "starting_details.html#a-note-on-caching",
    "href": "starting_details.html#a-note-on-caching",
    "title": "Getting Started Details",
    "section": "A Note on Caching",
    "text": "A Note on Caching\n\nbriefly describe caching and the fact that there are shared libraries\nlink out to the advanced topic on caching",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "starting_details.html#footnotes",
    "href": "starting_details.html#footnotes",
    "title": "Getting Started Details",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nStrictly speaking, the directory renv/library contains symlinks or symbolic links to packages in the renv library, which is a cache of the packages used in the project. This “cached” library is a shared library, meaning that if you have multiple projects using the same version of the package, the package is only stored once on your computer. This is a huge space saver, especially if you have many projects using the same package. More on this in the Advanced Topics section.↩︎",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Understanding {renv}"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Contributors\nThis site was created by Pat Callahan with contributions and feedback from Florian Pargent.\n\n\nLicense\nPublished under a Creative Commons Attribution-ShareAlike 4.0 International license (CC BY-SA 4.0 Deed).\n\n\n\n\n Back to top"
  },
  {
    "objectID": "intro_dependencies.html",
    "href": "intro_dependencies.html",
    "title": "Software Dependencies",
    "section": "",
    "text": "Figure 1: Dependencies on dependencies on dependencies\nThis page will talk about what software dependencies are, why users should care about them in general, and practical scenarios where one will want to manage them.",
    "crumbs": [
      "Home",
      "Background",
      "2. Software Dependencies"
    ]
  },
  {
    "objectID": "intro_dependencies.html#dependencies-overview",
    "href": "intro_dependencies.html#dependencies-overview",
    "title": "Software Dependencies",
    "section": "Dependencies Overview",
    "text": "Dependencies Overview\n\nwhat is it? the process/steps for actually controlling and documenting the softwares and specific versions used in a project.\nimage above provides a pretty good overview of what dependencies can look like in a project. The comic is a bit of an exaggeration, but it’s not far off from the truth in some cases.\ndependencies are simply the software that your software relies on to function.\ndependencies can be broken down into two main categories: system dependencies and library dependencies.\n\nsystem dependencies are the software that is required to run the software that you are developing. For example, if you are developing a R package, you will need R installed on your machine. (straightforward!)\nlibrary dependencies are the software that your software relies on to function. For example, if you are developing a R package that uses the dplyr package, dplyr is a library dependency. Or, as your might encounter more commonly, installing a new package in R will often require other packages to be installed as well. These are the dependencies of the package you are installing.",
    "crumbs": [
      "Home",
      "Background",
      "2. Software Dependencies"
    ]
  },
  {
    "objectID": "intro_dependencies.html#intro-to-management-practices",
    "href": "intro_dependencies.html#intro-to-management-practices",
    "title": "Software Dependencies",
    "section": "Intro to Management Practices",
    "text": "Intro to Management Practices\nGiven the complexity of software and dependencies already outlined in the previous section, it is important to manage these dependencies in a way that is both efficient and reproducible. This is especially important when sharing code with others or when working on a project over a long period of time. (also mention that dependency management exists on a spectrum; it is not always practical or necessary to manage every dependency in a project)\n(dependencies of package are not explicitly declared) - what does that last point mean? many packages or libraries that one will download also depend on other software packages. When downloading a package, the required dependencies are generally declared and they should be downloaded too. However, not all packages/libraries will declare specific versions of their dependencies, and a well-developed project will track these too. - However, when including package dependencies, a project that appears to only use 5-10 libraries can actually be using a few hundred. (Note that this process works recursively.)\n\nManual management\n\nthese can be managed manually with e.g. a written list of softwares used and versions if needed.\n\npros: there’s little technical knowledge needed to create simple Word or text document with this information. anyone can type these out.\ncons: inexact, error prone, still requires another user to manually download each package/library by hand, and (big issue) the dependencies of packages are not explicitly declared.\n\nGiven the complexity in all of this, automated solutions for dependency tracking are recommended.\n\n\n\nAutomated Management\n\nPython: requirements.txt, Pipfile, and pyproject.toml for pip, pipenv, and poetry respectively can, generally speaking, be used for library management and for declaring necessary Python versions.\n\nthis tutorial focuses on R and {renv} so no further comparison of these will be provided here\n\nR: {renv}, {packrat}, and {groundhogr} are the major options in the R ecosystem",
    "crumbs": [
      "Home",
      "Background",
      "2. Software Dependencies"
    ]
  },
  {
    "objectID": "ex_3.html",
    "href": "ex_3.html",
    "title": "exercise 3",
    "section": "",
    "text": "explicit snapshot of {rmarkdown}?\nGo to the Exercise 3 Folder\nshould use an RMarkown file here to demonstrate that it is important to explicitly add the markdown package to the snapshot sometimes\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Exercises",
      "Explicitly Record"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the {renv} Tutorial!",
    "section": "",
    "text": "Tip\n\n\n\nThe following software should be installed:\n\nR, recommend v4.3.X or more recent\n{renv}, installed with install.packages(\"renv\") from within R\nRStudio\n\n\n\n\nTutorial Structure\nThis self-paced tutorial is intended to take 1-2 hours to complete, depending on your previous familiarity with the theoretical and programming components of dependency management and R. Content has been written with novice R users in mind, but this tutorial (hopefully) provides useful information on setting up reproducible computational environments for R users of any skill level.\nThe tutorial is split into the following sections:\n\nBackground introduces a simplified definition and reasoning for reproducibility, its relation to managing software dependencies, and some of the nuances of dependencies in R.\n{renv} discusses the main functions of the {renv} package, and just enough of the underlying mechanics of the package to be useful.\nExercises contains a handful of practical exercises that walk users through the main components of using {renv}, and highlights some common mistakes or issues users might encounter.\nOptional Content dives into some of the more technical details of {renv}, caching, and related topics. This section is only recommended for users with more advanced use cases or troubleshooting needs.\n\n\n\n\n\n\n\nImportant\n\n\n\nAlthough optional for the general content in this tutorial, knowledge of git and GitHub will be necessary for the Exercises especially if you would like to receive feedback or troubleshoot issues remotely. Check out our tutorial on this topic if needed!\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Overview"
    ]
  }
]