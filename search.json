[
  {
    "objectID": "embed_and_use.html",
    "href": "embed_and_use.html",
    "title": "Alternative Workflow: embed() and use()",
    "section": "",
    "text": "https://rstudio.github.io/renv/reference/embed.html\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Optional Content",
      "`embed()` and `use()`"
    ]
  },
  {
    "objectID": "technical_definitions.html",
    "href": "technical_definitions.html",
    "title": "Technical Definitions",
    "section": "",
    "text": "Prior to discussing the various package managers in R, it is important to understand some R terminology relevant to dependency management, namely the concepts of and differences between packages, libraries, and repositories.",
    "crumbs": [
      "Home",
      "Background",
      "3. Technical Definitions"
    ]
  },
  {
    "objectID": "technical_definitions.html#pre-installed-packages",
    "href": "technical_definitions.html#pre-installed-packages",
    "title": "Technical Definitions",
    "section": "Pre-Installed Packages",
    "text": "Pre-Installed Packages\nUpon installing R, you will have access to a number of pre-installed packages. These packages are part of the “base” R distribution and are considered essential for working with R. A list of such packages can be identified by searching your installed packages for the “base” and “recommended” packages (also summarized as “high” priority packages). The code below generates this list of pre-installed packages in R, along with some information about each package.\n\ninstalled.packages(priority = c(\"base\", \"recommended\")) %&gt;%\n  as_tibble() %&gt;%\n  select(Package, Version, Priority, Depends, Imports) %&gt;%\n  DT::datatable(options = list(paging=TRUE, scrollY = '300px', pageLength = 11))\n\n\n\n\n\nYou will likely recognize some of these packages, such as the {stats} package, which contains many of the commonly used statistical functions that are built into R like glm(). Other packages, like {utils} and {survival}, contain functions for other common activities like reading in files and for performing survival analysis, respectively.\nSomewhat confusingly, the base R distribution also includes a package called {base} containing many functions and data structures that are considered essential for working with R. Some references to “base R” are therefore referring to the base package, while others refer to the base distribution of the R language. This distinction is not particularly important for the purposes of this tutorial, but it is worth keeping in mind when reading other R documentation.",
    "crumbs": [
      "Home",
      "Background",
      "3. Technical Definitions"
    ]
  },
  {
    "objectID": "technical_definitions.html#user-installed-packages",
    "href": "technical_definitions.html#user-installed-packages",
    "title": "Technical Definitions",
    "section": "User-Installed Packages",
    "text": "User-Installed Packages\nIn addition to the pre-installed packages, you can also install additional packages from online repositories like CRAN, Bioconductor, and GitHub. You have likely already done this in the past by using the install.packages() function to download from CRAN and/or Bioconductor or devtools::install_github() to get a package from GitHub. Beyond that, there are principally no differences between the pre-installed packages and user-installed packages; they are both just collections of functions, data, and documentation in a defined format.\nPackages, of course, need to be stored somewhere on your computer, and this is where the concept of libraries comes in.\n(Side note: you may hear people refer to R packages as libraries, likely stemming from the fact that packages are attached to your R session using the library() function. While this generally will not lead to much confusion, it is important to keep in mind the distinction between packages and libraries for the purposes of this tutorial.)",
    "crumbs": [
      "Home",
      "Background",
      "3. Technical Definitions"
    ]
  },
  {
    "objectID": "technical_definitions.html#footnotes",
    "href": "technical_definitions.html#footnotes",
    "title": "Technical Definitions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nStrictly speaking, the libraries do not have to be on your computer, but they do need to be accessible to your R session. For example, you could store your libraries on a network drive or on a cloud storage service like Dropbox, but this is not at all recommended because it can lead to performance issues and other problems. A more likely scenario is that you use RStudio through Posit Cloud (i.e. RStudio on a web interface) in which case the available libraries are stored and managed either by Posit or by an IT group for your institution on a separate server.↩︎",
    "crumbs": [
      "Home",
      "Background",
      "3. Technical Definitions"
    ]
  },
  {
    "objectID": "comp_reproducible.html",
    "href": "comp_reproducible.html",
    "title": "Reproducibility",
    "section": "",
    "text": "I propose to consider the question “What is reproducibility?” As reproducibility is such a central concept in science, one would think that it would be clearly defined. However, this is not the case. Reproducibility is an elusive concept. It has no single commonly agreed upon definition. Rather, it has many different, and each of these captures central, but different properties of it…\n– Odd Erik Gundersen (2021)\n\nGundersen explores many definitions put forward for “reproducibility”, but, for the purposes of this tutorial, his exploration of reproducibility is best summarized as “the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators” (Erik Gundersen 2021).\nIn principle, this sounds simple enough–provide others with enough information, and they should be able to reproduce your work! Achieving this in practice is, of course, a vastly complex endeavor that requires careful planning and execution. Above all, opinions on what constitutes sufficient “documentation” or how much documentation is necessary to achieve reproducibility can vary widely.\nOne might assume that academic publications provide all of the information required for an independent researcher to reproduce a publication; the requisite background on the topic, the data cleaning choices, and the exact statistical methods employed to arrive at a conclusion are theoretically included in a paper.1 In practice, a written publication generally cannot capture all of the nuances of data cleaning, exploration, and analysis employed by the original researchers. As a result, reproducing an analysis result only from a written description is, at best, incredibly time-consuming, and, at worst, an impossible endeavor.\nTo address the shortcomings of written descriptions, researchers must also strive to publish their code, data, and ideally both code and data together such that the complete documentation of the project is available to others.\n\n\n\nWhy should we concern ourselves with making reproducible code specifically? From a scientific perspective, reproducible code is essential in allowing other researchers to verify findings, to build upon existing work, and to ensure that the scientific process is transparent and trustworthy. From a practical perspective, reproducible code can save time and effort in the long run by making it easier to revisit and understand one’s own work, to make debugging and troubleshooting easier, and to collaborate with others.\nIn the context of this tutorial, we will focus on the practical aspects of making code reproducible. This mainly means taking steps to ensure that the code we write can be run on other machines, by other people, and in the future. In other words, we want to make sure that our code is portable and future-proof by ensuring the software originally used in creating our code is the same software used by others. Let’s look at this in more detail.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#a-brief-definition",
    "href": "comp_reproducible.html#a-brief-definition",
    "title": "Reproducibility",
    "section": "",
    "text": "I propose to consider the question “What is reproducibility?” As reproducibility is such a central concept in science, one would think that it would be clearly defined. However, this is not the case. Reproducibility is an elusive concept. It has no single commonly agreed upon definition. Rather, it has many different, and each of these captures central, but different properties of it…\n– Odd Erik Gundersen (2021)\n\nGundersen explores many definitions put forward for “reproducibility”, but, for the purposes of this tutorial, his exploration of reproducibility is best summarized as “the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators” (Erik Gundersen 2021).\nIn principle, this sounds simple enough–provide others with enough information, and they should be able to reproduce your work! Achieving this in practice is, of course, a vastly complex endeavor that requires careful planning and execution. Above all, opinions on what constitutes sufficient “documentation” or how much documentation is necessary to achieve reproducibility can vary widely.\nOne might assume that academic publications provide all of the information required for an independent researcher to reproduce a publication; the requisite background on the topic, the data cleaning choices, and the exact statistical methods employed to arrive at a conclusion are theoretically included in a paper.1 In practice, a written publication generally cannot capture all of the nuances of data cleaning, exploration, and analysis employed by the original researchers. As a result, reproducing an analysis result only from a written description is, at best, incredibly time-consuming, and, at worst, an impossible endeavor.\nTo address the shortcomings of written descriptions, researchers must also strive to publish their code, data, and ideally both code and data together such that the complete documentation of the project is available to others.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#reproducible-code",
    "href": "comp_reproducible.html#reproducible-code",
    "title": "Reproducibility",
    "section": "",
    "text": "Why should we concern ourselves with making reproducible code specifically? From a scientific perspective, reproducible code is essential in allowing other researchers to verify findings, to build upon existing work, and to ensure that the scientific process is transparent and trustworthy. From a practical perspective, reproducible code can save time and effort in the long run by making it easier to revisit and understand one’s own work, to make debugging and troubleshooting easier, and to collaborate with others.\nIn the context of this tutorial, we will focus on the practical aspects of making code reproducible. This mainly means taking steps to ensure that the code we write can be run on other machines, by other people, and in the future. In other words, we want to make sure that our code is portable and future-proof by ensuring the software originally used in creating our code is the same software used by others. Let’s look at this in more detail.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#your-computer",
    "href": "comp_reproducible.html#your-computer",
    "title": "Reproducibility",
    "section": "Your Computer",
    "text": "Your Computer\nGetting code to work on your own machine is, in principle, not too difficult. You can install the necessary software specific to your hardware and software, set up your environment, and run your code! Simple, right? (Writing code that actually works is another story, of course 😉.)\nHowever, this is only half the battle. When you run your code on your machine, you are running it in an environment that you have set up and configured to your liking. You have installed the software you need, perhaps have set up specific paths, and configured various settings to your preferences.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#someone-elses-computer",
    "href": "comp_reproducible.html#someone-elses-computer",
    "title": "Reproducibility",
    "section": "Someone Else’s Computer",
    "text": "Someone Else’s Computer\nWhen you share your code with others, you are effectively asking them to run your code on their machine, and it is unlikely that their computer is set up exactly like yours given how many degrees of freedom there are in operating systems, programming languages, software, and the different versions of these. A non-exhaustive list of examples where there might be software discrepancies are detailed below.\n\nMajor Machine & Software Differences\n\n\nOperating systemsProgramming languagesPackages/Libraries (Add-Ons)\n\n\nIt’s already well-known that different operating systems can have different software requirements. For example, some software might only be available on Windows, while others might only be available on MacOS or Linux.\nHowever, it is also important to consider that different versions of the same operating system can have different software requirements. For example, some software might only be compatible with Windows 10 and not Windows 11.\n\n\n\n\n\nAnother obvious difference is the programming language used in a project. For example, a project written in R will not run (correctly) in a Python, MATLAB, or Julia environment.\nLess obvious, however, and more common as a pain-point, are the differences in versions of programming languages. For example, a project written in Python 3.8 might not run in Python 3.9 due to changes in the language, and most R packages are only tested for compatibility back to the 5 most recent minor releases of R (e.g. 4.4, 4.3, 4.2, 4.1, 4.0).\nFortunately, most modern programming languages are cross-compatible across recent, major operating systems without issue.\n\n\n\n\n\nThe most likely pain point for reproducibility is the software add-ons, or packages/libraries, that are used in a project. For example, in R, there are over 20,000 packages available on CRAN, and in Python, there are over 200,000 packages available on PyPI.\nKeeping tracking of which packages are used and the specific versions of those packages is a major challenge in reproducibility.\nIn the context of the R programming language, most packages are likewise compatible across operating systems.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#all-of-the-machines",
    "href": "comp_reproducible.html#all-of-the-machines",
    "title": "Reproducibility",
    "section": "All of the Machines",
    "text": "All of the Machines\n\n\n\n\n\n\nExpect No One to Already Have the Required Software\n\n\n\n\nDon’t expect others to have the software you rely on.\nEven if others have the software, don’t expect them to have the same version.\n\n\n\nIn summary, the software environment of a project can be incredibly complex, with many degrees of freedom. If you have ever tried to run someone else’s code and it didn’t work, it was likely due to one of these reasons. Moreover, it’s not practical to manage most of these differences manually. For example, requesting that someone install Python v3.8.2, R v4.0.3, and a specific version of a package is technically possible, but exceptionally tedious and a poor use of time time. So this brings us to our core question: how do we set up a project to work on everybody’s machines?2 By managing our software dependencies, described in the next chapter.",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "comp_reproducible.html#footnotes",
    "href": "comp_reproducible.html#footnotes",
    "title": "Reproducibility",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAssuming, of course, that the data for the analysis can also be accessed either because it is publicly available or by way of contacting the original researcher.↩︎\nWithin reason; many software and hardware configurations just simply were not meant to be, but most modern programming languages are cross-compatible across recent, major operating systems without issue.↩︎",
    "crumbs": [
      "Home",
      "Background",
      "1. Reproducibility"
    ]
  },
  {
    "objectID": "restoring_a_project.html",
    "href": "restoring_a_project.html",
    "title": "Restoring Another Project",
    "section": "",
    "text": "The discussion so far on using {renv} has been about initiating a project with {renv} and then updating the renv.lock file as you work on the project. This is generally the more complicated portion of the work you will ever need to do with {renv}. The other side of using {renv} is restoring a project that someone else has shared with you or restoring a project that you have shared with others. This is the topic of this page.\nWe will cover restoring a project from a GitHub repository, restoring a project from a lockfile, and restoring a project after upgrading R.\n\nFrom a GitHub Repo\nRestoring a project library from a GitHub repository is ideally the most straightforward way to restore a project. A repo should always have all of the required files for restoring a project including the renv.lock file, the renv folder, the *.Rproj file, and the R scripts. Note that repos generally do not (and should not) contain the renv/library folder–this is intended behavior. Recall from the caching chapter that the renv/library contains “symlinks” to the actual package files on your machine, and these symlinks are not portable across machines. Moreover, the renv/library folder can be quite large and is not necessary for restoring a project.\nThe steps for restoring a project from a GitHub repository are as follows:\n\nClone the repository to your local machine with git clone\nOpen the *.Rproj file\nRun renv::restore()\n\nThere should not be anything else to do! The renv.lock file will be used to install the correct versions of the packages you need for the project.\n\n\nFrom a lockfile\nAnother approach to restoring a project is by sharing just the renv.lock file and other R scripts. This is useful if you are sharing a project with someone who does not use Git or if you are sharing a project with someone who does not have a GitHub account. The procedure for restoring contains just a few extra steps compared to the previous method, but should still look familiar:\n\nPlace the lockfile in the directory you are working on your project from. This should be a directory with a *.Rproj file.\nRun renv::status(). The results should look like this:\n\nrenv::status()\n#&gt; This project does not appear to be using renv.\n#&gt; Use `renv::restore()` to install the packages defined in lockfile.\n\nRun renv::restore(). If prompted, choose the option “Activate the project and use the project library.” This will create all other necessary files and directories for a {renv} project.\n\n\n\nAfter Upgrading R\nSomething that may come as a surprise is the need to restore a project after upgrading R. This occurs because the {renv} package creates a separate cache for each major and minor version of R that you use. These “major” and “minor” upgrades refer to semantic versioning of software which is a way of providing version numbers to software that uses three numbers separated by periods: major.minor.patch. For example, an upgrade from R4.3 to R4.4 will cause you to need to restore your project, but an upgrade from R4.3.1 to R4.3.2 will not.\nTherefore, if you upgrade R by a major or minor version, you should also update the version of R in the renv.lock file by running renv::snapshot() and update any packages in your project with renv::update(). This will ensure that the project is using the correct versions of the packages and of R that were used when the project was last worked on.\nNote that this is unlikely to be an issue if you are using e.g. a managed versioned of R and RStudio on a server, if you use a containerized environment like Docker, or if you actively manage the R version on your local machine with a solution like rswitch or rig. The latter two solutions are especially useful if you are working on multiple projects that require different versions of R on your local machine.\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "{renv}",
      "4. Restoring Projects"
    ]
  },
  {
    "objectID": "starting_details.html",
    "href": "starting_details.html",
    "title": "Getting Started Details",
    "section": "",
    "text": "Typical project workflow with {renv}\nThe previous page introduced the main functions needed for using {renv} in a project, and showed short example snippets of how to use them. This page will provide a more detailed explanation of the functions renv::init(), renv::status(), and renv::snapshot(), and will provide a more detailed example of how to use them in a project. Later chapters will cover the system library/renv cache and restoring a project from a lockfile.",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Starting Details"
    ]
  },
  {
    "objectID": "starting_details.html#initiation-example",
    "href": "starting_details.html#initiation-example",
    "title": "Getting Started Details",
    "section": "Initiation Example",
    "text": "Initiation Example\nInitiating {renv} in a project should print the following to the console:\nrenv::init()\n#&gt; The following package(s) will be updated in the lockfile:\n#&gt; \n#&gt; # CRAN -----------------------------------------------------------------------\n#&gt; - renv          [* -&gt; 1.0.7]\n#&gt; \n#&gt; The version of R recorded in the lockfile will be updated:\n#&gt; - R             [* -&gt; 4.4.0]\n#&gt; \n#&gt; - Lockfile written to \"~/Desktop/temporary\".\nNotably, one can see that the version of R (4.4.0) and the renv package (1.0.7) are recorded in the lockfile immediately. If you are initiating renv in an already existing project, the lockfile should also identify the other packages and package versions in use.\nAnd as noted, the directory structure should look similar to the one below, particularly the presence of the renv directory and the renv.lock file. For reference: the function used in the following example, dir_tree(), is from the {fs} package and is used to display the directory structure of the project. That is, it will list the files and directories in the directory where you are currently working.\nfs::dir_tree(recurse = 2)\n#&gt; .\n#&gt; ├── renv\n#&gt; │   ├── activate.R\n#&gt; │   ├── library\n#&gt; │   │   └── macos\n#&gt; │   ├── settings.json\n#&gt; │   └── staging\n#&gt; ├── renv.lock\n#&gt; └── temp.Rproj",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Starting Details"
    ]
  },
  {
    "objectID": "starting_details.html#dependencies-revisited",
    "href": "starting_details.html#dependencies-revisited",
    "title": "Getting Started Details",
    "section": "Dependencies Revisited",
    "text": "Dependencies Revisited\nAt the first degree, you depend on packages to perform your analysis or for your project, and you likely have included these packages in your project via calls to library(), require(), or namespaced calls e.g. package::function(). It is quite obvious that these packages are dependencies of your project, and thus need to be included in the renv.lock file.\nHowever, how does {renv} detect what packages are being used in the project? The renv:dependencies() function! This function works by searching all R-related files (e.g. .R, .Rmd, .qmd) for calls to packages. It is important to note that this function only detects packages that are actually used and properly declared in the project. Packages that have only been used interactively will not be detected as dependencies because they are not saved or used in any of the project files.\nYou will likely never need to use renv::dependencies() directly, but being aware of what it does can be massively beneficial in troubleshooting issues in the future. More importantly, this function underlies the renv:status() and renv::snapshot() functions which are essential for using {renv}. Before discussing these functions in detail, let’s take a look at the dependencies of dependencies.",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Starting Details"
    ]
  },
  {
    "objectID": "starting_details.html#dependency-trees",
    "href": "starting_details.html#dependency-trees",
    "title": "Getting Started Details",
    "section": "Dependency Trees",
    "text": "Dependency Trees\nAs mentioned in the Dependencies Overview, project dependencies can have their own dependencies. For example, you might have noticed that when installing 1 new package, R asks you if you want to install additional packages. These additional packages are dependencies of the package you are installing, and cumulatively they create a “dependency tree.” To get a visual representation of this, consider the following example displaying the recursive dependency tree for the {dplyr} package.\n\npak::pkg_deps_tree(\"dplyr\", dependencies = \"hard\")\n#&gt; ℹ Loading metadata database\n#&gt; ✔ Loading metadata database ... done\n#&gt; \n#&gt; dplyr 1.1.4 ✨🔧 ⬇ (1.60 MB)\n#&gt; ├─cli 3.6.3 ✨🔧 ⬇ (1.39 MB)\n#&gt; ├─generics 0.1.3 ✨ ⬇ (81.91 kB)\n#&gt; ├─glue 1.7.0 ✨🔧 ⬇ (159.50 kB)\n#&gt; ├─lifecycle 1.0.4 ✨ ⬇ (124.78 kB)\n#&gt; │ ├─cli\n#&gt; │ ├─glue\n#&gt; │ └─rlang 1.1.4 ✨🔧 ⬇ (1.89 MB)\n#&gt; ├─magrittr 2.0.3 ✨🔧 ⬇ (233.52 kB)\n#&gt; ├─pillar 1.9.0 ✨ ⬇ (652.06 kB)\n#&gt; │ ├─cli\n#&gt; │ ├─fansi 1.0.6 ✨🔧 ⬇ (383.06 kB)\n#&gt; │ ├─glue\n#&gt; │ ├─lifecycle\n#&gt; │ ├─rlang\n#&gt; │ ├─utf8 1.2.4 ✨🔧 ⬇ (206.91 kB)\n#&gt; │ └─vctrs 0.6.5 ✨🔧 ⬇ (1.89 MB)\n#&gt; │   ├─cli\n#&gt; │   ├─glue\n#&gt; │   ├─lifecycle\n#&gt; │   └─rlang\n#&gt; ├─R6 2.5.1 ✨ ⬇ (83.20 kB)\n#&gt; ├─rlang\n#&gt; ├─tibble 3.2.1 ✨🔧 ⬇ (688.89 kB)\n#&gt; │ ├─fansi\n#&gt; │ ├─lifecycle\n#&gt; │ ├─magrittr\n#&gt; │ ├─pillar\n#&gt; │ ├─pkgconfig 2.0.3 ✨ ⬇ (18.45 kB)\n#&gt; │ ├─rlang\n#&gt; │ └─vctrs\n#&gt; ├─tidyselect 1.2.1 ✨🔧 ⬇ (224.68 kB)\n#&gt; │ ├─cli\n#&gt; │ ├─glue\n#&gt; │ ├─lifecycle\n#&gt; │ ├─rlang\n#&gt; │ ├─vctrs\n#&gt; │ └─withr 3.0.0 ✨ ⬇ (242.00 kB)\n#&gt; └─vctrs\n#&gt; \n#&gt; Key:  ✨ new |  ⬇ download | 🔧 compile\n\n\nThis tree shows the dependencies of the dplyr package at the top level, and the dependencies of those dependencies nested below each package. The tree is recursive, meaning that it will continue to show dependencies of dependencies until it reaches the end of the dependency chain. This is a simplified example, but it is important to understand that the dependencies of dependencies can be quite complex and can lead to a large number of packages being installed in your project. Above all, you should note that all of the packages on this dependency tree need to be recorded in the renv.lock file to ensure that your project is reproducible.\nYou might have noticed the argument dependencies = \"hard\" in the function call. The dependencies argument is used to specify the kinds of dependencies to install. However, the discussion about dependencies so far has implied that that another package is either a dependency or not, and you might now be asking yourself: are there different kinds of dependencies? Yes, there are! To be more specific, there are different levels of dependencies, discussed below.",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Starting Details"
    ]
  },
  {
    "objectID": "starting_details.html#dependency-levels",
    "href": "starting_details.html#dependency-levels",
    "title": "Getting Started Details",
    "section": "Dependency Levels",
    "text": "Dependency Levels\nGenerally-speaking, there are two levels of dependencies in R: hard and soft. Hard dependencies are those that are absolutely required for the software to function, while soft dependencies are those that are not required but can improve the package or provide some optional functionality. In the context of R, the following are the dependency levels:\n\nHard Dependencies\n\nImports\nDepends\nLinkingTo\n\nSoft Dependencies\n\nSuggests\nEnhances\n\n\nThe exact differences between the sub-levels of dependencies are not important for the purposes of this course, and, in most cases, the details of dependency levels are obscure and irrelevant. You will be able to successfully use R and {renv} without knowing the difference between hard and soft dependencies 99% of the time especially because most packages you download will only have Hard dependencies.\nHowever, it is still worthwhile to be aware that these these differences exist when using automated package managers as they will default to capturing just the Hard dependencies, but you might encounter scenarios where you mistakenly expect the snapshot to include the Soft dependencies. In such cases, you might need to explicitly renv::record() the dependency into the renv.lock file. Examples of this scenario will be revisited in the exercises.",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Starting Details"
    ]
  },
  {
    "objectID": "starting_details.html#status",
    "href": "starting_details.html#status",
    "title": "Getting Started Details",
    "section": "Status",
    "text": "Status\nThe renv::status() function checks the “status” of the project, and will return a message indicating whether the project is in a consistent state. A consistent state means that the packages declared in the lockfile match the packages actually used in the project, and that the versions of the packages declared in the lockfile match the versions of the packages discovered in the project library. For example, if you have a package declared in the lockfile but it is not actually used in the project, the project is not in a consistent state. A project that is consistent should produce the following output when renv::status() is run:\nrenv::status()\n#&gt; No issues found -- the project is in a consistent state.\nHowever, if there are issues with the project, the output will indicate what the issues are. For example, if a package is used in the project but not declared in the lockfile, the output will look like this:\n\nrenv::status()\n#&gt; The following package(s) are in an inconsistent state:\n#&gt; \n#&gt;  package    installed recorded used\n#&gt;  boot       y         n        y   \n#&gt;  cli        y         n        y   \n#&gt;  dplyr      y         n        y   \n#&gt;  fansi      y         n        y   \n#&gt;  generics   y         n        y   \n#&gt;  glue       y         n        y   \n#&gt;  lattice    y         n        y   \n#&gt;  lifecycle  y         n        y   \n#&gt;  lme4       y         n        y   \n#&gt;  magrittr   y         n        y   \n#&gt;  MASS       y         n        y   \n#&gt;  Matrix     y         n        y   \n#&gt;  minqa      y         n        y   \n#&gt;  nlme       y         n        y   \n#&gt;  nloptr     y         n        y   \n#&gt;  pillar     y         n        y   \n#&gt;  pkgconfig  y         n        y   \n#&gt;  R6         y         n        y   \n#&gt;  Rcpp       y         n        y   \n#&gt;  RcppEigen  y         n        y   \n#&gt;  rlang      y         n        y   \n#&gt;  tibble     y         n        y   \n#&gt;  tidyselect y         n        y   \n#&gt;  utf8       y         n        y   \n#&gt;  vctrs      y         n        y   \n#&gt;  withr      y         n        y   \n#&gt; \n#&gt; See ?renv::status() for advice on resolving these issues.\n\n\nThe key to interpreting this output is to note the installed, recorded, and used columns. The installed column indicates whether the package is installed in the project library, the recorded column indicates whether the package is declared in the lockfile, and the used column indicates whether the package is actually used in the project. In this example, the packages are installed and used in the project, but are not declared in the lockfile. This is an inconsistent state, and the issues should be resolved by running renv::snapshot().",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Starting Details"
    ]
  },
  {
    "objectID": "starting_details.html#snapshot",
    "href": "starting_details.html#snapshot",
    "title": "Getting Started Details",
    "section": "Snapshot",
    "text": "Snapshot\nThe renv::snapshot() function is used to update the lockfile with the packages used in the project. As previously discussed, this function will search all R-related files in the project for calls to library(), require(), and namespaced calls e.g. package::function(), and will update the lockfile with the packages used in the project. If the lockfile is already up to date, the function will return the following message:\nrenv::snapshot()\n#&gt; - The lockfile is already up to date.\nIf the lockfile is not up to date, the function will return a message indicating the packages that will be updated in the lockfile. For example, if you have added a new package to the project, the output will look like this:\n\nrenv::snapshot()\n#&gt; The following package(s) will be updated in the lockfile:\n#&gt; \n#&gt; # CRAN -----------------------------------------------------------------------\n#&gt; - boot         [* -&gt; 1.3-30]\n#&gt; - cli          [* -&gt; 3.6.3]\n#&gt; - dplyr        [* -&gt; 1.1.4]\n#&gt; - fansi        [* -&gt; 1.0.6]\n#&gt; - generics     [* -&gt; 0.1.3]\n#&gt; - glue         [* -&gt; 1.7.0]\n#&gt; - lattice      [* -&gt; 0.22-6]\n#&gt; - lifecycle    [* -&gt; 1.0.4]\n#&gt; - lme4         [* -&gt; 1.1-35.5]\n#&gt; - magrittr     [* -&gt; 2.0.3]\n#&gt; - MASS         [* -&gt; 7.3-60.2]\n#&gt; - Matrix       [* -&gt; 1.7-0]\n#&gt; - minqa        [* -&gt; 1.2.7]\n#&gt; - nlme         [* -&gt; 3.1-164]\n#&gt; - nloptr       [* -&gt; 2.1.1]\n#&gt; - pillar       [* -&gt; 1.9.0]\n#&gt; - pkgconfig    [* -&gt; 2.0.3]\n#&gt; - R6           [* -&gt; 2.5.1]\n#&gt; - Rcpp         [* -&gt; 1.0.13]\n#&gt; - RcppEigen    [* -&gt; 0.3.4.0.0]\n#&gt; - rlang        [* -&gt; 1.1.4]\n#&gt; - tibble       [* -&gt; 3.2.1]\n#&gt; - tidyselect   [* -&gt; 1.2.1]\n#&gt; - utf8         [* -&gt; 1.2.4]\n#&gt; - vctrs        [* -&gt; 0.6.5]\n#&gt; - withr        [* -&gt; 3.0.0]\n#&gt; \n#&gt; - Lockfile written to \"~/Desktop/temp/renv.lock\".\n\n\nPackages not already installed in the package can be recognized by the [* -&gt; version] notation. The [*] indicates that the package is not installed in the project library, and the version indicates the version of the package that will be installed. The lockfile is then written to the project directory, and the project should now in a consistent state.",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Starting Details"
    ]
  },
  {
    "objectID": "starting_details.html#footnotes",
    "href": "starting_details.html#footnotes",
    "title": "Getting Started Details",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nStrictly speaking, the directory renv/library contains symlinks or symbolic links to packages in the renv library, which is a cache of the packages used in the project. This “cached” library is a shared library, meaning that if you have multiple projects using the same version of the package, the package is only stored once on your computer. This is a huge space saver, especially if you have many projects using the same package. More on this in the Caching chapter.↩︎",
    "crumbs": [
      "Home",
      "{renv}",
      "2. Starting Details"
    ]
  },
  {
    "objectID": "ex_3.html",
    "href": "ex_3.html",
    "title": "Explcitly Recording Packages",
    "section": "",
    "text": "As with the previous exercise, it is recommended that you fork the repository to your GitHub account and clone it to your local machine to follow along with the examples. This will allow the course facilitators to see your work, provide feedback, and troubleshoot with you as needed.\nIf you’re not familiar with using git and GitHub, you can skip the forking and cloning steps and instead download a zip file of the repository.",
    "crumbs": [
      "Home",
      "Exercises",
      "Explicitly Record"
    ]
  },
  {
    "objectID": "ex_3.html#instructions",
    "href": "ex_3.html#instructions",
    "title": "Explcitly Recording Packages",
    "section": "Instructions",
    "text": "Instructions\n\nOpen the R project i.e. the .Rproj file.\nInitiate {renv}} by running renv::init().\nCheck the identified dependencies by running renv::dependencies().\n\nWhat packages are required and why?\n\nCheck the status of the dependencies by running renv::status().\n\nIs the lock file in-sync with the project library? Why not?\n\nInstall the identified dependencies by running renv::restore().\nOpen the analysis_doc.qmd file and knit it to generate the analysis document.\n\nWhy did the knitting fail?\nCheck the documentation for the map_data() function with ?map_data.\n\nExplicitly record the needed package with renv::record(\"package_name\").\nCheck the status of the dependencies again by running renv::status().\n\nWhat has changed?\n\nInstall the identified dependencies by running renv::restore().\nOpen the analysis_doc.qmd file and knit it to generate the analysis document.\n\nWas it successful this time?\nWhy did you need to explicitly record one of the packages? Take a look at the DESCRIPTION file for {ggplot2} to help understand: packageDescription(\"ggplot2\").",
    "crumbs": [
      "Home",
      "Exercises",
      "Explicitly Record"
    ]
  },
  {
    "objectID": "ex_init_snapshot.html",
    "href": "ex_init_snapshot.html",
    "title": "Initialize and Snapshot",
    "section": "",
    "text": "The following examples will guide you through the process of initializing a project with {renv} and then snapshotting the project to capture the packages used in the project. It is recommended that you fork the intro-to-renv-exercises repository to your GitHub account and clone it to your local machine to follow along with the examples. This will allow the course facilitators to see your work, provide feedback, and troubleshoot with you as needed.\nHowever, this is not strictly necessary. You can also follow along by creating a new project on your local machine and initializing {renv} in that project. If you choose to do this, you can skip the forking and cloning steps and instead download a zip file of the repository.",
    "crumbs": [
      "Home",
      "Exercises",
      "Init and Snapshot"
    ]
  },
  {
    "objectID": "ex_init_snapshot.html#instructions",
    "href": "ex_init_snapshot.html#instructions",
    "title": "Initialize and Snapshot",
    "section": "Instructions",
    "text": "Instructions\n\nCreate an .Rproj in this folder, init-snapshot-exercises.\nInstall the {renv} package if needed.\nInitialize a new project with {renv} with renv::init() (if not already done when creating the .Rproj).\nCreate a new R script in this folder, init-snapshot-exercises, called script.R.\nWrite code that uses a variety of different packages.\n\nTry experimenting with calls to library() and namespacing functions e.g. package::function(). If you’re short on time, there’s some example code included below.\n\nSave the script.\nRun the renv::dependencies() function to see the new dependencies of your project.\n\nWhat packages are listed? Is this what you expected?\n\nCheck the status of your project with renv::status().\n\nWhat do you notice about the results printed to the console?\n\nSave these new dependencies to the renv.lock file with renv::snapshot().\n(Optional) Commit your changes to your repository, and push them to GitHub.\n\n\nExample Code\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Read the iris dataset\ndata(iris)\n\n# Print the first 6 rows\nhead(iris)\n\n# Create a scatter plot of Sepal.Length and Sepal.Width\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point()\n  \n# Perform some data analysis using dplyr\niris %&gt;%\n  group_by(Species) %&gt;%\n  summarise(mean_sepal_length = mean(Sepal.Length))\n  \n# Create a linear mixed effects model with {lme4}\nlme4::lmer(Sepal.Length ~ Sepal.Width + (1 | Species), data = iris)",
    "crumbs": [
      "Home",
      "Exercises",
      "Init and Snapshot"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Contributors\nThis site was created by Pat Callahan with contributions and feedback from Florian Pargent.\n\n\nLicense\nPublished under a Creative Commons Attribution-ShareAlike 4.0 International license (CC BY-SA 4.0 Deed).\n\n\n\n\n Back to top"
  },
  {
    "objectID": "caching.html",
    "href": "caching.html",
    "title": "Caching",
    "section": "",
    "text": "This page will discuss the concept of caching and how it is used in {renv}.",
    "crumbs": [
      "Home",
      "{renv}",
      "3. Caching"
    ]
  },
  {
    "objectID": "caching.html#cache-locations",
    "href": "caching.html#cache-locations",
    "title": "Caching",
    "section": "Cache Locations",
    "text": "Cache Locations\nAlthough you will likely never need to interact with the cache directly, it can be useful to know where it is located on your system in case you need to troubleshoot any issues with {renv}. Moreover, seeing the actual cache locations can help make the concept of caching more tangible.\nThe {renv} caches for R packages will be nested in folders below one of the following locations, based on your operating system:\n\n\nLinux: ~/.cache/R/renv/cache\nmacOS: ~/Library/Caches/org.R-project.R/R/renv/cache\nWindows: %LOCALAPPDATA%/renv/cache\n\n\n(Posit 2024)\nWithin each of these cache folders, you should see sub-folders for each version of R that you have used with {renv}. For example, on a macOS system, you might see the following folders:\nlist.files(\"~/Library/Caches/org.R-project.R/R/renv/cache/v5\", full.names = T)\n\n#&gt; [1] \"~/Library/Caches/org.R-project.R/R/renv/cache/v5/macos\"\n#&gt; [2] \"~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.2\"\n#&gt; [3] \"~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.3\"\n#&gt; [4] \"~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.4\"\nThe {renv} package also provides a function to access the exact path to the cache used in your current project. This cache location will be slightly more specific than the paths listed above because it is a reference to one specific cache, but not all of the caches on your system. You can access the path to the cache with the following code:\n# Run on a MacOS, and &lt;USER&gt; removed. \nrenv::paths$cache()\n#&gt; [1] \"/Users/&lt;USER&gt;/Library/Caches/org.R-project.R/R/renv/cache/v5/macos/R-4.4/aarch64-apple-darwin20\"\n\nPackages in the Cache\nEach of the caches will contain the packages that you downloaded for use in your projects as you were using that version of R. So for example, if you downloaded version 1.0.9 of {dplyr} while using R 4.3, you would find the package in the R-4.3 folder of the cache. If you then started a project using R 4.4 and downloaded version 1.1.2 of {dplyr}, you would find that version in the R-4.4 folder of the cache. Moreover, if another project using R 4.4 also needed version 1.1.4 of {dplyr}, it would be found in the R-4.4 folder of the cache.\nThis text might be an over-explanation of the concept so I’ll demonstrate it with a code chunk below that lists out the versions of {dplyr} in the cache.\nlist.files(\"~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.3/aarch64-apple-darwin20/dplyr\")\n#&gt; [1] \"1.1.2\" \"1.1.4\"\nlist.files(\"~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.4/aarch64-apple-darwin20/dplyr\")\n#&gt; [1] \"1.1.2\" \"1.1.4\"\nSo it seems that I have versions 1.1.2 and 1.1.4 of {dplyr} in the caches for both R 4.3 and R 4.4. However, this is merely a coincidence; it won’t always be the case that the caches have the exact same versions of packages. Let’s look at an example where the versions differ.\nlist.files(\"~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.3/aarch64-apple-darwin20/ggplot2\")\n#&gt; [1] \"3.4.3\" \"3.4.4\" \"3.5.0\" \"3.5.1\"\nlist.files(\"~/Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.4/aarch64-apple-darwin20/ggplot2\")\n#&gt; [1] \"3.5.0\" \"3.5.1\"\nIn this case, I have versions 3.4.3, 3.4.4, 3.5.0, and 3.5.1 of {ggplot2} in the cache for R 4.3, but only versions 3.5.0 and 3.5.1 in the cache for R 4.4 which is an expected outcome. I used several older version of {ggplot2} with an older version of R and then upgraded to a newer version of R and only used the newer versions of {ggplot2}!",
    "crumbs": [
      "Home",
      "{renv}",
      "3. Caching"
    ]
  },
  {
    "objectID": "caching.html#project-library",
    "href": "caching.html#project-library",
    "title": "Caching",
    "section": "Project Library",
    "text": "Project Library\nThe discussion of caching so far has covered just the shared libraries that {renv} uses to store packages. But how does {renv} use these caches, how does this relate back to your project libraries, and what is the role of the renv/library folder in your projects?\nEach {renv} project has its own library, located in the renv/library folder of the project. When you install a package in a project with {renv}, however, the package is not technically installed in the renv/library library. In fact, none of the packages used in your project are actually stored in this folder. Instead, the contents of these folders are “symlinks” to the packages in the shared library.\n\nSymlinks\nA symlink or “symbolic link” is a file that points to another file or directory. It is a reference to the original file or directory, and it can be used to access the original file or directory from a different location. Symlinks are important because they allow you to create shortcuts to files or directories, which can be useful for organizing files, accessing files from different locations, or creating symbolic links to files or directories that are located on different drives or partitions.\nIn the context of {renv}, the apparent packages in the renv/library folder of your project are actually symlinks that point to the packages in the shared library!",
    "crumbs": [
      "Home",
      "{renv}",
      "3. Caching"
    ]
  },
  {
    "objectID": "renv_getting_started.html",
    "href": "renv_getting_started.html",
    "title": "{renv}: Easy Start",
    "section": "",
    "text": "This page provides the basic steps to starting a project with the {renv} package, and how to update the renv.lock file as you add new packages to your project. This page will be followed by a more detailed explanation of the package’s functionality in the Starting Details page.",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Quick Start"
    ]
  },
  {
    "objectID": "renv_getting_started.html#with-a-new-rstudio-project",
    "href": "renv_getting_started.html#with-a-new-rstudio-project",
    "title": "{renv}: Easy Start",
    "section": "With a New RStudio Project",
    "text": "With a New RStudio Project\nWhen initiating a new project from within RStudio such as a typical .Rproj, a Quarto website, a new R package or similar, you can follow the approximate directions below to check the box that you would like to “Use renv with [your] project.”\nFile -&gt; New Project -&gt; New Directory -&gt; New Project -&gt; [x] Use renv with this project",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Quick Start"
    ]
  },
  {
    "objectID": "renv_getting_started.html#from-an-existing-project-or-folder",
    "href": "renv_getting_started.html#from-an-existing-project-or-folder",
    "title": "{renv}: Easy Start",
    "section": "From an Existing Project or Folder",
    "text": "From an Existing Project or Folder\nIn essentially all other scenarios, one can initiate {renv} for a project by navigating to your project/folder and running the two commands below.\ninstall.packages(\"renv\")\n\nlibrary(renv)\ninit()",
    "crumbs": [
      "Home",
      "{renv}",
      "1. Quick Start"
    ]
  },
  {
    "objectID": "ex_2.html",
    "href": "ex_2.html",
    "title": "Using restore()",
    "section": "",
    "text": "As with the previous exercise, it is recommended that you fork the repository to your GitHub account and clone it to your local machine to follow along with the examples. This will allow the course facilitators to see your work, provide feedback, and troubleshoot with you as needed.\nIf you’re not familiar with using git and GitHub, you can skip the forking and cloning steps and instead download a zip file of the repository.",
    "crumbs": [
      "Home",
      "Exercises",
      "Restore"
    ]
  },
  {
    "objectID": "ex_2.html#instructions",
    "href": "ex_2.html#instructions",
    "title": "Using restore()",
    "section": "Instructions",
    "text": "Instructions\n\nOpen the R project i.e. the .Rproj file.\nAt the console, run the command renv::dependencies().\n\nWhat packages do you see listed as direct dependencies, and what project files depend on which dependency?\n\nTake a look at the presentation.rmd file.\n\nNote that {rmarkdown} was listed as a dependency from this file, but there is not actually a call to the package in the file. Why do you think this is?\n\nTry to Render the presentation.rmd file.\n\nWhat happens? Why did the render fail?\n\nRun the command renv::restore().\n\nWhat happens?\n\nOpen the billboard_100.R file, and run the code. This should create the top_billboard_rankings.rds file, needed in the next step.\nTry to render the presentation.rmd file.\n\nWhat happens?",
    "crumbs": [
      "Home",
      "Exercises",
      "Restore"
    ]
  },
  {
    "objectID": "advanced_topics.html",
    "href": "advanced_topics.html",
    "title": "Advanced Topics",
    "section": "",
    "text": "Optional: discuss any advanced topics?",
    "crumbs": [
      "Home",
      "Optional Content",
      "Advanced Topics"
    ]
  },
  {
    "objectID": "advanced_topics.html#binder",
    "href": "advanced_topics.html#binder",
    "title": "Advanced Topics",
    "section": "Binder",
    "text": "Binder\n(link to the tutorial if we create one. otherwise, just link to Binder page on renv)",
    "crumbs": [
      "Home",
      "Optional Content",
      "Advanced Topics"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Introduction to {renv}",
    "section": "",
    "text": "Attribution-ShareAlike 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nAdditional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org.\n\n\n\n Back to top"
  },
  {
    "objectID": "outline.html",
    "href": "outline.html",
    "title": "outline",
    "section": "",
    "text": "Software reproducibility\n\n\nwhat is it?\nwhat are the goals?\nwhat needs to be tracked?\n\nvaries based on project needs. a completely reproducible system would have the same versions of software on the same versions of the operating system on the same hardware models. The hardware aspect is difficult enough as is, but softwares also have a variety of different versions, sometimes with minor changes that won’t affect output in any noticeable way, and sometimes those changes are breaking such that code simply no longer runs, or worse, the code still runs but provides different results than expected\n\nwhat are the challenges?\n\n\nDependency Mangement\n\n\nwhat is it? the process/steps for actually controlling and documenting the softwares and specific versions used in a project.\nthese can be managed informally with e.g. a written list of softwares used and versions if needed.\n\npros: there’s little technical knowledge needed here. anyone can type these out.\ncons: inexact, error prone, still requires another user to manually download each package/library by hand, and (big issue) the dependencies of packages are not explicitly declared.\n\nwhat does that last point mean? many packages or libraries that one will download also depend on other software packages. When downloading a package, the required dependencies are generally declared and they should be downloaded too. However, not all packages/libraries will declare specific versions of their dependencies, and a well-developed project will track these too.\nHowever, when including package dependencies, a project that appears to only use 5-10 libraries can actually be using a few hundred. (Note that this process works recursively.)\n\n\nGiven the complexity in all of this, automated solutions for dependency tracking are recommended.\nPython: requirements.txt, Pipfile, and pyproject.toml for pip, pipenv, and poetry respectively can, generally speaking, be used for library management and for declaring necessary Python versions.\n\nthis tutorial focuses on R and {renv} so no further comparison of these will be provided here\n\nR: {renv}, {packrat}, and {groundhogr} are the major options in the R ecosystem\n\n\nWhy {renv}?\n\n\n{packrat} was for many years the most popular environment/dependency manager package for R. It is maintained by RStudio/Posit, and still receives bug updates. However, it has been soft-deprecated by Posit in favor of the {renv} package since at least April 2020. You should not start new projects with {packrat}, and, if possible, migrate existing projects using {packrat} over to {renv}. That said, it is worth knowing about the existence of this package because old tutorials, projects, and repos may still be using it.\n{groundhogr}: this is an open-source project to enable dependency management, and appears to have some popularity within psychological research and possibly other fields. It claims to address some shortcomings of Posit Package Manager (discussed later), but my opinion is that the comparisons are misleading; {groundhogr} must be compared against {renv} combined with PPM, not just against PPM. That said, if your collaborators are using {groundhogr}, then I would recommend learning it to use it for those projects, but the benefits of {renv} make it the overwhelming favorable option.\n{renv}: this is another one of Posit’s inventions, and is now in its 1.X.X version iterations meaning it can be considered stable without any breaking changes likely to occur at least for many years. (This would generally be indicated with a minor release to e.g. 1.X+1.X or a major release to e.g. 2.X.X)\n\npros:\n\ndeveloped by professional software engineers at Posit so there is paid support. development, however, is also done open-source so people can independently propose bug fixes or raise issues\nlikely the most popular option already. learning this is a transferable skill between academia and industry.\nintegration with other Posit packages and development pipelines, in particular with CI/CD pipelines on GitHub repos. Another tutorial will discuss CI/CD pipelines, but, in short, using {renv} means you can more easily automate deploying websites through GitHub Pages, checking the development status of R packages you work on, deploy Shiny apps to servers, and run other automated process that require specific package versions because Posit has developed extensions that make this easier.\nit works at a project level (i.e. it should be paired with the use of an R Project/.RProj file). {groundhogr} notes this as a disadvantage so I suppose this requirement is subjective. However, I argue this is a pro because using an R Project structure helps manage your working environment\nNiche: {renv} also has integrations allowing it to be used with Python which can be useful in instances where you have a multi-language project. This would likely only be encountered in complex, multi-team analysis projects or possibly in industry settings.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the {renv} Tutorial!",
    "section": "",
    "text": "Tutorial Overview\nThis self-paced tutorial is intended to take 1-2 hours to complete, depending on your previous familiarity with the theoretical and programming components of dependency management and R. Content has been written with novice R users in mind, but this tutorial (hopefully) provides useful information on setting up reproducible computational environments for R users of any skill level.\nThe tutorial is split into the following sections:\n\nBackground introduces a simplified definition and reasoning for reproducibility, its relation to managing software dependencies, and some of the nuances of dependencies in R.\n{renv} discusses the main functions of the {renv} package, and just enough of the underlying mechanics of the package to be useful.\nExercises contains a handful of practical exercises that walk users through the main components of using {renv}, and highlights some common mistakes or issues users might encounter.\nOptional Content dives into some of the more technical details of {renv}, caching, and related topics. This section is only recommended for users with more advanced use cases or troubleshooting needs.\n\n\n\n\n\n\n\nRecommended Software\n\n\n\nThis tutorial assumes you have the following software installed:\n\nR, recommend v4.4.X or more recent\nRStudio\n{renv}, installed with install.packages(\"renv\") from within R\n\nAlthough optional for the general content in this tutorial, knowledge of git and GitHub will be helpful for the Exercises especially if you would like to receive feedback or troubleshoot issues remotely. Check out our git and GitHub tutorial if needed!\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Overview"
    ]
  },
  {
    "objectID": "intro_dependencies.html",
    "href": "intro_dependencies.html",
    "title": "Software Dependencies",
    "section": "",
    "text": "The general concept of software dependencies is relatively straightforward: “dependencies” are other softwares/programs that the software you’re using or developing depends on to function. For example, if you are developing an R package, you will need R installed on your machine, or if the R code you are using includes functions from the dplyr package, then the dplyr must be downloaded first.\nThere are many layers of dependencies that can exist in a project, and these dependencies can be difficult to manage. Extending the previous example, one must keep in mind that dplyr itself has dependencies, such as tibble, rlang, and vctrs, which must also be downloaded. And tibble, rlang, and vctrs have dependencies too, and so on. This process works recursively until all unique packages are identified, and a project that appears to only use e.g. 5-10 libraries can ultimately require a few dozen or hundred packages. This is not an R-specific problem, but rather a common issue in software development known as “dependency hell.”1\nIf you’re ever curious about the dependencies of a package, they should all be declared in the DESCRIPTION file of an R package. There are a variety of ways you can access this information:\n\nMethods for reading the DESCRIPTION file of an R package:\n\nutils::packageDescription() to print the complete DESCRIPTION file of a package to the console\ntools::package_dependencies() for just a list of dependencies from the DESCRIPTION file\nLooking at the DESCRIPTION file online on the package’s CRAN or GitHub page\n\npak::pkg_deps_tree() for a visual representation of the direct dependencies and the recursive dependencies. An example of this will be shown in the Starting Details chapter.",
    "crumbs": [
      "Home",
      "Background",
      "2. Software Dependencies"
    ]
  },
  {
    "objectID": "intro_dependencies.html#manual-management",
    "href": "intro_dependencies.html#manual-management",
    "title": "Software Dependencies",
    "section": "Manual management",
    "text": "Manual management\nAs noted, the dependencies for your project can be managed manually with e.g. a written list of the softwares and versions used. The main pros to this approach is that little technical knowledge is needed to create a simple Word or text file with this information, and such information can likewise be shared easily. However, the cons are that this approach is inexact, error-prone, still requires another user to manually download each package/library by hand, and the recursive dependencies are unlikely to be logged. This approach is not recommended for any serious project, especially if you are working with others or if you are working on a project over a long period of time.",
    "crumbs": [
      "Home",
      "Background",
      "2. Software Dependencies"
    ]
  },
  {
    "objectID": "intro_dependencies.html#automated-management",
    "href": "intro_dependencies.html#automated-management",
    "title": "Software Dependencies",
    "section": "Automated Management",
    "text": "Automated Management\nAutomated management of dependencies is the recommended approach for managing dependencies. This approach involves using a package manager to automatically install the necessary software dependencies for a project. The main pros to this approach are that it is more accurate, less error-prone, and can be easily shared with others. The cons are that it requires some technical knowledge to set up and can be more difficult to troubleshoot if something goes wrong.\nThere are many package managers available for different programming languages, and the choice of package manager can depend on the programming language you are using, the complexity of your project, and your personal preferences. Some common package managers for R and Python are listed below:\n\nRPython\n\n\nThe major current and historical options for managing R dependencies are:\n\n{renv} is arguably the most important package for managing R dependencies, is maintained by Posit, and is our recommendation\n{groundhogr} is a package that is similar to {renv}, and developed by independent, open-source contributors\n{packrat} is a deprecated package that is no longer recommended for new projects\n\n\n\nIf you’re coming from a background in Python, you might be familiar with the following analogous approaches:\nThe pip, pipenv, and poetry libraries can, generally speaking, be used for library management and for declaring necessary Python versions in the respective requirements.txt, Pipfile, and pyproject.toml files. However, one would usually use this in conjunction with software like Anaconda or Miniconda to manage Python versions and environments.\n\n\n\nThe next chapter delves into some necessary Technical Definitions in the R ecosystem, the following chapter will really dive in to the details of R Package Managers.",
    "crumbs": [
      "Home",
      "Background",
      "2. Software Dependencies"
    ]
  },
  {
    "objectID": "intro_dependencies.html#footnotes",
    "href": "intro_dependencies.html#footnotes",
    "title": "Software Dependencies",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf you have enough time, read about how the left-pad incident broke the internet as an example of how dependencies can go wrong.↩︎",
    "crumbs": [
      "Home",
      "Background",
      "2. Software Dependencies"
    ]
  },
  {
    "objectID": "dependencies_in_r.html",
    "href": "dependencies_in_r.html",
    "title": "Dependency Management in R",
    "section": "",
    "text": "This page covers more specific information regarding dependency management in R including legacy projects like {packrat}, alternative community-driven projects like {groundhogr}, and introduces the {renv} package.\nThe goal of package managers in R then is to ensure that the packages you need are downloaded from a defined repository and installed in the libraries you want to use. There are several package managers available for R, each with its own strengths and weaknesses. The three most known package managers are {packrat}, {groundhogr}, and {renv}.",
    "crumbs": [
      "Home",
      "Background",
      "4. R Package Managers"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#packrat",
    "href": "dependencies_in_r.html#packrat",
    "title": "Dependency Management in R",
    "section": "{packrat}",
    "text": "{packrat}\nThe {packrat} package was one of the first package managers developed for R, and it was designed to address some of the shortcomings of the base R package management system. {packrat} allows you to create a “snapshot” of your package dependencies, which can be shared with collaborators or used to recreate your working environment at a later date. This can be useful if you are working on a project with multiple collaborators or if you need to reproduce your analysis at a later date.\nIt was, for many years, the most popular environment/dependency manager package for R, and was developed and maintained by RStudio/Posit. However, it has been soft-deprecated by Posit in favor of the {renv} package since at least April 2020. You should not start new projects with {packrat}, and, if possible, migrate existing projects using {packrat} over to {renv}. That said, it is worth knowing about the existence of this package because old tutorials, projects, and repos may still be using it.",
    "crumbs": [
      "Home",
      "Background",
      "4. R Package Managers"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#groundhogr",
    "href": "dependencies_in_r.html#groundhogr",
    "title": "Dependency Management in R",
    "section": "{groundhogr}",
    "text": "{groundhogr}\n{groundhogr} is a community-driven package manager for R that was developed as an alternative to {packrat} and {renv}. It is designed to be lightweight and easy to use, and it has already gained a following among R users who are looking for an alternative to {packrat}, notably within psychological research and related fields. The example from their website is included below:\ninstall.packages(\"groundhog\")\nlibrary(\"groundhog\")\npkgs &lt;- c(\"rio\",\"metafor\")\ngroundhog.library(pkgs, \"2023-09-01\")\nThis example demonstrates a scenario in which you would like to install the rio and metafor packages as they were on September 1st, 2023. The groundhog.library() function is used to install these packages, and the date is specified as the second argument. One of the main benefits of this approach is that swapping the library() call for groundhog.library() is a simple change to make in your scripts, and it can be used to ensure that your collaborators are using the same package versions as you are.\nThe other main benefit of using {groundhogr} is that it is community-driven, meaning that it is developed and maintained by a group of R users who are interested in improving the package management experience in R outside of the Posit ecosystem. However, there are also some potential drawbacks to using {groundhogr}.\nThe package is still in relatively early stages of development so it may not be as stable or reliable as other package managers like {renv}. Likewise, the package does not have as many features as other package managers, so it will only be suitable for a smaller number of use cases. One of the largest benefits of learning {renv} instead of {groundhogr} is a result of a networking effect; {renv} is a transferable skill between academia and industry, and it is likely to be more widely used than {groundhogr} especially because of the professional support and software development the package receives from Posit.",
    "crumbs": [
      "Home",
      "Background",
      "4. R Package Managers"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#renv",
    "href": "dependencies_in_r.html#renv",
    "title": "Dependency Management in R",
    "section": "{renv}",
    "text": "{renv}\n{renv} is another one of Posit’s inventions, and is designed to be lightweight, easy to use, and to work well with other Posit packages and CI/CD development pipelines. A separate tutorial will discuss CI/CD pipelines in detail, but, in short, using {renv} with your R projects allows you to easily automate advanced tasks like publishing Shiny apps, deploying website updates through GitHub Pages, checking the development status of R packages you create, and more. These benefits may seem a bit less tangible if you are new to R, but they are very important both for professional software development and for tasks that can make your work significantly easier in the long run.\nMore to the focus of this tutorial, however, {renv} greatly assists in making your project reproducible by creating a “snapshot” of your package dependencies in as few as two commands:\nrenv::init()\nrenv::snapshot()\nThe results of this code will be discussed in the next chapter, but, in short, the “snapshot” it creates can be shared with collaborators or used to recreate your working environment at a later date. This is referred to as restoring a project, and can be done with the aptly-named renv::restore() function.\n\nPros and Cons\nAs mentioned, {renv} is likely the most popular option for package management in R, and is a highly transferable skill between both academia and industry settings1. Thus, it is the one that I recommend using for new projects, and will be the focus of the rest of this tutorial on dependency management in R.\nMoreover, this package can be considered a relatively stable package as it has moved beyond it’s initial development stages into a version 1 release (currently at version 1.0.7). It is maintained by professional software engineers at Posit, and also receives open-source contributions and bug reports via the public GitHub repository.\nIn comparison to {groundhogr}, one of the supposed main drawbacks of {renv} is that it is project-based, meaning that you need to create an R Project (.RProj file) to use {renv} whereas {groundhogr} allows you to simply embed the function groundhog.library(pkg, date) into any R file. This is not a drawback in my opinion, as using an R Project structure helps manage your working environment, but it is worth noting that the default workflow for {renv} is not as flexible as {groundhogr} in this regard. However, {renv} also offers a similar workflow to {groundhogr} via the embed() and use() functions, discussed in the supplementary material of this tutorial.",
    "crumbs": [
      "Home",
      "Background",
      "4. R Package Managers"
    ]
  },
  {
    "objectID": "dependencies_in_r.html#footnotes",
    "href": "dependencies_in_r.html#footnotes",
    "title": "Dependency Management in R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNiche: {renv} also has integrations allowing it to be used with Python which can be useful in instances where you have a multilanguage project. This would likely only be encountered in complex, multiteam analysis projects or possibly in industry settings.↩︎",
    "crumbs": [
      "Home",
      "Background",
      "4. R Package Managers"
    ]
  }
]