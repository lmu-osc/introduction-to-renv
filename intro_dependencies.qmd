---
title: "Software Dependencies"
---

![Dependencies on dependencies on dependencies](https://imgs.xkcd.com/comics/dependency.png){#fig-dependencies}

This page will talk about what software dependencies are, why users should care about them in general, and practical scenarios where one will want to manage them.

## Dependencies Overview

-   what is it? the process/steps for actually controlling and documenting the softwares and specific versions used in a project.
- image above provides a pretty good overview of what dependencies can look like in a project. The comic is a bit of an exaggeration, but it's not far off from the truth in some cases.

-   dependencies are simply the software that your software relies on to function. 
-   dependencies can be broken down into two main categories: **system dependencies** and **library dependencies**.
    -   system dependencies are the software that is required to run the software that you are developing. For example, if you are developing a R package, you will need R installed on your machine. (straightforward!)
    -   library dependencies are the software that your software relies on to function. For example, if you are developing a R package that uses the `dplyr` package, `dplyr` is a library dependency. Or, as your might encounter more commonly, installing a new package in R will often require other packages to be installed as well. These are the dependencies of the package you are installing.

## Intro to Management Practices


Given the complexity of software and dependencies already outlined in the previous section, it is important to manage these dependencies in a way that is both efficient and reproducible. This is especially important when sharing code with others or when working on a project over a long period of time. (also mention that dependency management exists on a spectrum; it is not always practical or necessary to manage every dependency in a project)

(dependencies of package are not explicitly declared)
-   what does that last point mean? many packages or libraries that one will download also depend on other software packages. When downloading a package, the required dependencies are generally declared and they should be downloaded too. However, not all packages/libraries will declare specific versions of their dependencies, and a well-developed project will track these too.
        -   However, when including package dependencies, a project that appears to only use 5-10 libraries can actually be using a few hundred. (Note that this process works recursively.)
    
### Manual management

-   these can be managed manually with e.g. a written list of softwares used and versions if needed.
    -   pros: there's little technical knowledge needed to create simple Word or text document with this information. anyone can type these out.
    -   cons: inexact, error prone, still requires another user to manually download each package/library by hand, and (big issue) the dependencies of packages are not explicitly declared.
-   Given the complexity in all of this, automated solutions for dependency tracking are recommended.


### Automated Management

-   Python: `requirements.txt`, `Pipfile`, and `pyproject.toml` for pip, pipenv, and poetry respectively can, generally speaking, be used for library management and for declaring necessary Python versions.
    -   this tutorial focuses on R and {renv} so no further comparison of these will be provided here
-   R: {renv}, {packrat}, and {groundhogr} are the major options in the R ecosystem


